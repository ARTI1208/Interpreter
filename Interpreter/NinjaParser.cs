//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ninja.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class NinjaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, SEMICOLON=5, INTKEY=6, DOUBLEKEY=7, BOOLKEY=8, 
		WHILE=9, FOR=10, DO=11, IF=12, ELSE=13, SIN=14, COS=15, TAN=16, ASIN=17, 
		ACOS=18, ATAN=19, ATAN2=20, ADD=21, SUB=22, MUL=23, DIV=24, ASSIGN=25, 
		ADDASSIGN=26, SUBASSIGN=27, MULASSIGN=28, DIVASSIGN=29, AND=30, OR=31, 
		LESS=32, GREATER=33, EQUAL=34, NOTEQUAL=35, LESSEQUAL=36, GREQUAL=37, 
		WS=38, BOOL=39, DOUBLE=40, INT=41, RETURN_KEYWORD=42, PASS=43, MAIN=44, 
		FUN_KEYWORD=45, VOID=46, COMMA=47, OBRACE=48, CBRACE=49, LPAREN=50, RPAREN=51, 
		COMMENT=52, STRING=53, ID=54;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_main_signature = 2, RULE_function = 3, 
		RULE_v_function = 4, RULE_v_fun_signature = 5, RULE_m_function = 6, RULE_m_fun_signature = 7, 
		RULE_code = 8, RULE_main_code = 9, RULE_operation = 10, RULE_method_return = 11, 
		RULE_params = 12, RULE_var_signature = 13, RULE_builtin_func_p = 14, RULE_builtin_func_e = 15, 
		RULE_call = 16, RULE_parameterized_call = 17, RULE_simple_call = 18, RULE_custom_call = 19, 
		RULE_call_params = 20, RULE_val_or_id = 21, RULE_ariphOperand = 22, RULE_ariphTerm = 23, 
		RULE_ariphExpr = 24, RULE_ariphExprEx = 25, RULE_boolOperand = 26, RULE_boolExpr = 27, 
		RULE_boolExprEx = 28, RULE_declare = 29, RULE_ariphID = 30, RULE_boolID = 31, 
		RULE_trig = 32, RULE_trig2 = 33, RULE_sin = 34, RULE_cos = 35, RULE_tan = 36, 
		RULE_asin = 37, RULE_acos = 38, RULE_atan = 39, RULE_atan2 = 40, RULE_myif = 41, 
		RULE_myif_short = 42, RULE_mywhile = 43, RULE_mydo_while = 44, RULE_myfor = 45, 
		RULE_meaningfulType = 46;
	public static readonly string[] ruleNames = {
		"program", "main", "main_signature", "function", "v_function", "v_fun_signature", 
		"m_function", "m_fun_signature", "code", "main_code", "operation", "method_return", 
		"params", "var_signature", "builtin_func_p", "builtin_func_e", "call", 
		"parameterized_call", "simple_call", "custom_call", "call_params", "val_or_id", 
		"ariphOperand", "ariphTerm", "ariphExpr", "ariphExprEx", "boolOperand", 
		"boolExpr", "boolExprEx", "declare", "ariphID", "boolID", "trig", "trig2", 
		"sin", "cos", "tan", "asin", "acos", "atan", "atan2", "myif", "myif_short", 
		"mywhile", "mydo_while", "myfor", "meaningfulType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'move'", "'turn'", "'hit'", "'shoot'", "';'", "'int'", "'double'", 
		"'bool'", "'while'", "'for'", "'do'", "'if'", "'else'", "'sin'", "'cos'", 
		"'tan'", "'asin'", "'acos'", "'atan'", "'atan2'", "'+'", "'-'", "'*'", 
		"'/'", "'='", "'+='", "'-='", "'*='", "'/='", "'&&'", "'||'", "'<'", "'>'", 
		"'=='", "'!='", "'<='", "'>='", null, null, null, null, "'return'", "'pass'", 
		"'main'", "'fun'", "'void'", "','", "'{'", "'}'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "SEMICOLON", "INTKEY", "DOUBLEKEY", "BOOLKEY", 
		"WHILE", "FOR", "DO", "IF", "ELSE", "SIN", "COS", "TAN", "ASIN", "ACOS", 
		"ATAN", "ATAN2", "ADD", "SUB", "MUL", "DIV", "ASSIGN", "ADDASSIGN", "SUBASSIGN", 
		"MULASSIGN", "DIVASSIGN", "AND", "OR", "LESS", "GREATER", "EQUAL", "NOTEQUAL", 
		"LESSEQUAL", "GREQUAL", "WS", "BOOL", "DOUBLE", "INT", "RETURN_KEYWORD", 
		"PASS", "MAIN", "FUN_KEYWORD", "VOID", "COMMA", "OBRACE", "CBRACE", "LPAREN", 
		"RPAREN", "COMMENT", "STRING", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ninja.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static NinjaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		public enum ParamType
		{
			Receive, Pass
		};

		public enum CallType
		{
			BuiltIn, Custom
		};
		
		public enum VarType
	    {
	    	Int, Double, Bool
	    };
	    
	    public enum ReturnType
	    {
	    	Int, Double, Bool, Void
	    };

		public class ParamData
		{
			
	        public string name;
	        
	        public dynamic value;
		
			public VarType type;	
			
			public ParamType paramType = ParamType.Receive;	
		
			public override string ToString()
	        {
	            return $"param {type} {name}";
	        }
		}
		
		public class VarData
	    {
	        public string name;
	        public VarType type;
	        public dynamic value;
	        
	    }

	    public class MethodData
	    {
	        public string name;
			public bool isMeaningful;
	        public ReturnType returnType;
	        public ArrayList<NinjaParser.ParamData> paramList = new ArrayList<NinjaParser.ParamData>();
	        public List<CallData> callList = new ArrayList<CallData>();
	        
			public dynamic returnValue;
			
			public Dictionary<string, VarData> varTable = new Dictionary<string, VarData>();
	        
	        public override string ToString()
	        {
	        	return $"fun {returnType} {name}, params : {paramList} ";
	        }
	    }
	 
	 	public static Dictionary<string, VarData> varTable = new Dictionary<string, VarData>();
	    public static Dictionary<string, MethodData> metTable = new Dictionary<string, MethodData>();
	    int depth = 0;
	    static string currentMet = "?";
	    
	    public static void Debug(string line)
	    {
	        Console.WriteLine(line);
	    }
	    
	    public static void Error(string message)
	    {
	        ConsoleColor curr = Console.ForegroundColor;
	        Console.ForegroundColor = ConsoleColor.Red;
	        Console.WriteLine(message);
	        Console.ForegroundColor = curr;
	    }
		
		public static bool CheckParams(NinjaParser.CallData call, NinjaParser.MethodData method)
	    {
	    	Console.WriteLine($"Checking params of {call.name}");
	    	if (call.paramList.Count != method.paramList.Count)
	    	{
	    		Console.WriteLine($"Expected params {method.paramList.Count}, found {call.paramList.Count}");
	    		return false;
	    	}
	    
	    	for (int i = 0; i < call.paramList.Count; i++)
	    	{
	    				
	    		if (call.paramList[i].type == method.paramList[i].type)
	    		{
	    			method.paramList[i].value = call.paramList[i].value;
	    			method.varTable[method.paramList[i].name].value = call.paramList[i].value;
	    			Console.WriteLine($"addf var {method.paramList[i].name}, val {method.varTable[method.paramList[i].name].value}");
	    		}
	    		else
	    		{
	    			Console.WriteLine($"Type mismatch: expected {method.paramList[i].type}, found {call.paramList[i].type} with value {call.paramList[i].value}");
	    			return false;
	    		}
	    	}
	    
	    	return true;
	    }
	            		
		static ArrayList<byte> _bytes = new ArrayList<byte>();
		
		static string ParamListToString(ArrayList<NinjaParser.ParamData> list)
	    {
	    	string s = "{";
	    	foreach (var data in list)
	    	{
	    		if (data.paramType == NinjaParser.ParamType.Pass)
	    		{
	    			s += $" {data.type} {data.value},";	
	    		}
	    		else
	    		{
	    			s += $" {data.type} {data.name} = {data.value},";	
	    		}
	    	}
	    
	    	s = (s.Length > 1 ? s.Substring(0, s.Length - 1) : s) + " }";
	    	return s;
	    }
		
		public class Block
		{
			public List<OperationClass> operations = new List<OperationClass>();
			public Dictionary<string, VarData> varTable = new Dictionary<string, VarData>();
			
			public void Eval()
			{
				for (int i = 0; i < operations.Count; ++i)
					operations[i].Eval();
			}
			
			public OperationClass createOperationClass()
			{
				operations.Add(new OperationClass());
				return operations[operations.Count - 1];
			}
			
			public ExprClass ToExpr()
			{
				int lastInd = operations.Count - 1;
				var res = new ExprClass(operations[lastInd]);
				operations[lastInd] = res;
				return res;
			}
		}
		
		public class CallData : OperationClass
		{
			public string name;
				
			public dynamic value;
				
			public CallType callType;
			
			public ReturnType returnType;
				
			public ArrayList<NinjaParser.ParamData> paramList = new ArrayList<NinjaParser.ParamData>();
			
			public override dynamic Eval()
			{
				if (callType == NinjaParser.CallType.Custom)
				{
					if (NinjaParser.metTable.ContainsKey(name) && CheckParams(this, NinjaParser.metTable[name]))
					{
						//GoThroughCalls(NinjaParser.metTable[call.name]);
						foreach(var sm in NinjaParser.metTable[name].callList)
						{
							sm.Eval();
						}
					}
				}
				else
				{
					Console.WriteLine($"Calling builtin method {name} with params {ParamListToString(paramList)}");
					//					Console.WriteLine(call.name);
					switch (name)
					{
						case "move":
					//							Console.WriteLine($"move byte");
							_bytes.Add(1);
							break;
						case "turn":
					//							Console.WriteLine("turn byte");
							_bytes.Add(2);
							break;
						case "hit":
					//							Console.WriteLine($"hit byte");
							_bytes.Add(3);
							break;
						case "shoot":
					//							Console.WriteLine($"shoot byte");
							_bytes.Add(4);
							break;
						default:
							Console.WriteLine($"no byte for this op {name}");
							break;
					}
				}
				return null;
			}
		}
		
		public static Block curBlock = new Block();
		
		public class OperationClass
		{
			public OperationClass()
			{
				
			}
			
			public OperationClass(OperationClass op)
			{
				
			}
			
			public virtual dynamic Eval()
			{
				throw new NotImplementedException("OperationClass class is abstract");
			}
		}
	    
		public enum ObjType
		{
			Number, Logic, Var, Operation
		}

		public class ExprStackObject
		{
			public ObjType type;
			public dynamic value;
			
			public ExprStackObject(): this(0) { }
			
			public ExprStackObject(double value)
			{
				type = ObjType.Number;
				this.value = value;
			}

			public ExprStackObject(int value)
			{
				type = ObjType.Number;
				this.value = value;
			}
			
			public ExprStackObject(bool value)
			{
				type = ObjType.Number;
				this.value = value;
			}
			
			public dynamic Calc()
			{
				if (type == ObjType.Number)
					return value;
				if (type == ObjType.Var)
					return curBlock.varTable[value].value;
				Error("\"" + value + "\" is an operation");
				return null;
			}
		}
		
		public class ExprClass : OperationClass
		{
			public List<ExprStackObject> exprStack;
			
			public ExprClass(OperationClass parent) : base(parent)
			{
				exprStack = new List<ExprStackObject>();
			}
			
			public void Push(ExprStackObject value)
			{
				exprStack.Add(value);
			}
			
			public ExprStackObject Pop(List<ExprStackObject> vals)
			{
				var res = vals[vals.Count - 1];
				vals.RemoveAt(vals.Count - 1);
				return res;
			}
			
			public override dynamic Eval()
			{
				List<ExprStackObject> stack = new List<ExprStackObject>();
				foreach (var elem in exprStack)
				{
					if (elem.type == ObjType.Number || elem.type == ObjType.Var)
						stack.Add(elem);
					else
					{
						ExprStackObject left, right;
						switch (elem.value)
						{
							case "&&":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() && right.Calc()));
								break;
							
							case "||":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() || right.Calc()));
								break;
								
							case "<":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() < right.Calc()));
								break;
							
							case ">":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() > right.Calc()));
								break;
							
							case "==":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() == right.Calc()));
								break;
							
							case "!=":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() != right.Calc()));
								break;
							
							case "<=":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() <= right.Calc()));
								break;
							
							case ">=":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() >= right.Calc()));
								break;
						
							case "+":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() + right.Calc()));
								break;
							
							case "-":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() - right.Calc()));
								break;
							
							case "*":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() * right.Calc()));
								break;
							
							case "/":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(left.Calc() / right.Calc()));
								break;
							
							case "=":
								right = Pop(stack);
								left = Pop(stack);
								try
								{
									dynamic rightval = right.Calc();
									VarData data = curBlock.varTable[left.value];
									if (data.value.GetType() == rightval.GetType())
										data.value = rightval;
									else if (data.type == VarType.Double)
										data.value = (double)rightval;
									else
										Error("Can't convert \"" + rightval + "\" to " + data.type);
									stack.Add(new ExprStackObject(data.value));
								}
								catch (KeyNotFoundException)
								{
									Error("Variable " + left.value + " does not exist in current context");
								}
								break;
							
							case "+=":
								right = Pop(stack);
								left = Pop(stack);
								try
								{
									dynamic rightval = right.Calc();
									VarData data = curBlock.varTable[left.value];
									if (data.value.GetType() == rightval.GetType())
										data.value += rightval;
									else if (data.type == VarType.Double)
										data.value += (double)rightval;
									else
										Error("Can't convert \"" + rightval + "\" to " + data.type);
									stack.Add(new ExprStackObject(data.value));
								}
								catch (KeyNotFoundException)
								{
									Error("Variable " + left.value + " does not exist in current context");
								}
								break;
							
							case "-=":
								right = Pop(stack);
								left = Pop(stack);
								try
								{
									dynamic rightval = right.Calc();
									VarData data = curBlock.varTable[left.value];
									if (data.value.GetType() == rightval.GetType())
										data.value -= rightval;
									else if (data.type == VarType.Double)
										data.value -= (double)rightval;
									else
										Error("Can't convert \"" + rightval + "\" to " + data.type);
									stack.Add(new ExprStackObject(data.value));
								}
								catch (KeyNotFoundException)
								{
									Error("Variable " + left.value + " does not exist in current context");
								}
								break;
							
							case "*=":
								right = Pop(stack);
								left = Pop(stack);
								try
								{
									dynamic rightval = right.Calc();
									VarData data = curBlock.varTable[left.value];
									if (data.value.GetType() == rightval.GetType())
										data.value *= rightval;
									else if (data.type == VarType.Double)
										data.value *= (double)rightval;
									else
										Error("Can't convert \"" + rightval + "\" to " + data.type);
									stack.Add(new ExprStackObject(data.value));
								}
								catch (KeyNotFoundException)
								{
									Error("Variable " + left.value + " does not exist in current context");
								}
								break;
							
							case "/=":
								right = Pop(stack);
								left = Pop(stack);
								try
								{
									dynamic rightval = right.Calc();
									VarData data = curBlock.varTable[left.value];
									if (data.value.GetType() == rightval.GetType())
										data.value /= rightval;
									else if (data.type == VarType.Double)
										data.value /= (double)rightval;
									else
										Error("Can't convert \"" + rightval + "\" to " + data.type);
									stack.Add(new ExprStackObject(data.value));
								}
								catch (KeyNotFoundException)
								{
									Error("Variable " + left.value + " does not exist in current context");
								}
								break;
								
							case "sin":
								right = Pop(stack);
								stack.Add(new ExprStackObject(Math.Sin(right.Calc())));
								break;
							
							case "cos":
								right = Pop(stack);
								stack.Add(new ExprStackObject(Math.Cos(right.Calc())));
								break;
							
							case "tan":
								right = Pop(stack);
								stack.Add(new ExprStackObject(Math.Tan(right.Calc())));
								break;
							
							case "asin":
								right = Pop(stack);
								stack.Add(new ExprStackObject(Math.Asin(right.Calc())));
								break;
							
							case "acos":
								right = Pop(stack);
								stack.Add(new ExprStackObject(Math.Acos(right.Calc())));
								break;
							
							case "atan":
								right = Pop(stack);
								stack.Add(new ExprStackObject(Math.Atan(right.Calc())));
								break;
							
							case "atan2":
								right = Pop(stack);
								left = Pop(stack);
								stack.Add(new ExprStackObject(Math.Atan2(left.Calc(), right.Calc())));
								break;
						}
						
					}
				}
				var res = stack[0];
				res.Calc();
				return res.value;
			}
		}

		public NinjaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NinjaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 94; function();
					}
					} 
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 100; main();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FUN_KEYWORD) {
				{
				{
				State = 101; function();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}


			/*if (NinjaParser.metTable.ContainsKey("main"))
			                	{
			                		++depth;
			                		//GoThroughCalls(NinjaParser.metTable[call.name]);
			                		foreach(var sm in NinjaParser.metTable["main"].callList)
			                		{
			                			sm.Eval();
			                		}
			                	}*/


			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public Main_signatureContext main_signature() {
			return GetRuleContext<Main_signatureContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public Main_codeContext main_code() {
			return GetRuleContext<Main_codeContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; main_signature();
			State = 110; Match(OBRACE);
			State = 111; main_code();
			State = 112; Match(CBRACE);

				curBlock.Eval();

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_signatureContext : ParserRuleContext {
		public ITerminalNode FUN_KEYWORD() { return GetToken(NinjaParser.FUN_KEYWORD, 0); }
		public ITerminalNode VOID() { return GetToken(NinjaParser.VOID, 0); }
		public ITerminalNode MAIN() { return GetToken(NinjaParser.MAIN, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public Main_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMain_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMain_signature(this);
		}
	}

	[RuleVersion(0)]
	public Main_signatureContext main_signature() {
		Main_signatureContext _localctx = new Main_signatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_main_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(FUN_KEYWORD);
			State = 116; Match(VOID);
			State = 117; Match(MAIN);
			State = 118; Match(LPAREN);
			State = 119; Match(RPAREN);

				MethodData newMet = new MethodData
				{
					name = "main",
					returnType = ReturnType.Void
				};
				metTable.Add("main", newMet);
				currentMet = "main";

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public V_functionContext v_function() {
			return GetRuleContext<V_functionContext>(0);
		}
		public M_functionContext m_function() {
			return GetRuleContext<M_functionContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122; v_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; m_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class V_functionContext : ParserRuleContext {
		public V_fun_signatureContext v_fun_signature() {
			return GetRuleContext<V_fun_signatureContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public V_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_v_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterV_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitV_function(this);
		}
	}

	[RuleVersion(0)]
	public V_functionContext v_function() {
		V_functionContext _localctx = new V_functionContext(Context, State);
		EnterRule(_localctx, 8, RULE_v_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; v_fun_signature();
			State = 127; Match(OBRACE);
			State = 128; code();
			State = 129; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class V_fun_signatureContext : ParserRuleContext {
		public string funName;
		public IToken _ID;
		public ITerminalNode FUN_KEYWORD() { return GetToken(NinjaParser.FUN_KEYWORD, 0); }
		public ITerminalNode VOID() { return GetToken(NinjaParser.VOID, 0); }
		public ITerminalNode ID() { return GetToken(NinjaParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public V_fun_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_v_fun_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterV_fun_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitV_fun_signature(this);
		}
	}

	[RuleVersion(0)]
	public V_fun_signatureContext v_fun_signature() {
		V_fun_signatureContext _localctx = new V_fun_signatureContext(Context, State);
		EnterRule(_localctx, 10, RULE_v_fun_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(FUN_KEYWORD);
			State = 132; Match(VOID);
			State = 133; _localctx._ID = Match(ID);

				string methodName = (_localctx._ID!=null?_localctx._ID.Text:null);
				_localctx.funName =  methodName;
				if (methodName == "main" || metTable.ContainsKey(methodName))
					throw new NotImplementedException("!!!Method overloading is not supported yet!!!");

				MethodData newMet = new MethodData
				{
					name = methodName,
					returnType = ReturnType.Void
				};
				
				metTable.Add(newMet.name, newMet);
				currentMet = methodName;

			State = 135; Match(LPAREN);
			State = 136; @params((_localctx._ID!=null?_localctx._ID.Text:null));
			State = 137; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class M_functionContext : ParserRuleContext {
		public M_fun_signatureContext _m_fun_signature;
		public Method_returnContext _method_return;
		public M_fun_signatureContext m_fun_signature() {
			return GetRuleContext<M_fun_signatureContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public Method_returnContext method_return() {
			return GetRuleContext<Method_returnContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public M_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterM_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitM_function(this);
		}
	}

	[RuleVersion(0)]
	public M_functionContext m_function() {
		M_functionContext _localctx = new M_functionContext(Context, State);
		EnterRule(_localctx, 12, RULE_m_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; _localctx._m_fun_signature = m_fun_signature();
			State = 140; Match(OBRACE);
			State = 141; code();
			State = 142; _localctx._method_return = method_return();
			State = 143; Match(CBRACE);


				string methodName = _localctx._m_fun_signature.funName;
				
				ReturnType actualReturn;
				
				switch(_localctx._method_return.type)
			    {
			        case "int":
			        	actualReturn = ReturnType.Int;
			        	break;
			        case "double":
			            actualReturn = ReturnType.Double;
			            break;
			        case "bool":
			            actualReturn = ReturnType.Bool;
			            break;		
			        default:
			    		throw new NotImplementedException();     
			    }

				if (actualReturn != metTable[methodName].returnType){
					throw new Exception($"Actual return is {actualReturn}, expected declared return type {metTable[methodName].returnType}");
				}

				metTable[methodName].returnValue = _localctx._method_return.value;


			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class M_fun_signatureContext : ParserRuleContext {
		public string funName;
		public MeaningfulTypeContext _meaningfulType;
		public IToken _ID;
		public ITerminalNode FUN_KEYWORD() { return GetToken(NinjaParser.FUN_KEYWORD, 0); }
		public MeaningfulTypeContext meaningfulType() {
			return GetRuleContext<MeaningfulTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(NinjaParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public M_fun_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m_fun_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterM_fun_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitM_fun_signature(this);
		}
	}

	[RuleVersion(0)]
	public M_fun_signatureContext m_fun_signature() {
		M_fun_signatureContext _localctx = new M_fun_signatureContext(Context, State);
		EnterRule(_localctx, 14, RULE_m_fun_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(FUN_KEYWORD);
			State = 147; _localctx._meaningfulType = meaningfulType();
			State = 148; _localctx._ID = Match(ID);

				
				string methodName = (_localctx._ID!=null?_localctx._ID.Text:null);
				_localctx.funName =  methodName;
				if (methodName == "main" || metTable.ContainsKey(methodName))
					throw new NotImplementedException("!!!Method overloading is not supported yet!!!");

				MethodData newMet = new MethodData
				{
					name = methodName,
					isMeaningful = true
				};
				
				switch((_localctx._meaningfulType!=null?TokenStream.GetText(_localctx._meaningfulType.Start,_localctx._meaningfulType.Stop):null))
			    {
			    	case "int":
			    		newMet.returnType = ReturnType.Int;
			    		break;
			    	case "double":
			            newMet.returnType = ReturnType.Double;
			           	break;
			        case "bool":
			            newMet.returnType = ReturnType.Bool;
			            break;		
			    }

				metTable.Add(newMet.name, newMet);
				currentMet = methodName;


			State = 150; Match(LPAREN);
			State = 151; @params((_localctx._ID!=null?_localctx._ID.Text:null));
			State = 152; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 16, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN) | (1L << ID))) != 0)) {
				{
				{
				State = 154; operation(curBlock.createOperationClass());
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_codeContext : ParserRuleContext {
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public Main_codeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMain_code(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMain_code(this);
		}
	}

	[RuleVersion(0)]
	public Main_codeContext main_code() {
		Main_codeContext _localctx = new Main_codeContext(Context, State);
		EnterRule(_localctx, 18, RULE_main_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN) | (1L << ID))) != 0)) {
				{
				{
				State = 160; operation(curBlock.createOperationClass());
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public OperationClass oper;
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public Custom_callContext custom_call() {
			return GetRuleContext<Custom_callContext>(0);
		}
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public MyifContext myif() {
			return GetRuleContext<MyifContext>(0);
		}
		public Myif_shortContext myif_short() {
			return GetRuleContext<Myif_shortContext>(0);
		}
		public MywhileContext mywhile() {
			return GetRuleContext<MywhileContext>(0);
		}
		public Mydo_whileContext mydo_while() {
			return GetRuleContext<Mydo_whileContext>(0);
		}
		public MyforContext myfor() {
			return GetRuleContext<MyforContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public OperationContext(ParserRuleContext parent, int invokingState, OperationClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation(OperationClass oper) {
		OperationContext _localctx = new OperationContext(Context, State, oper);
		EnterRule(_localctx, 20, RULE_operation);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166; call(_localctx.oper);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167; custom_call(_localctx.oper);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 168; declare(curBlock.ToExpr());
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 169; ariphExprEx(curBlock.ToExpr());
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 170; boolExprEx(curBlock.ToExpr());
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 171; myif();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 172; myif_short();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 173; mywhile();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 174; mydo_while();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 175; myfor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_returnContext : ParserRuleContext {
		public string type;
		public dynamic value;
		public Val_or_idContext _val_or_id;
		public ITerminalNode RETURN_KEYWORD() { return GetToken(NinjaParser.RETURN_KEYWORD, 0); }
		public Val_or_idContext val_or_id() {
			return GetRuleContext<Val_or_idContext>(0);
		}
		public Method_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMethod_return(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMethod_return(this);
		}
	}

	[RuleVersion(0)]
	public Method_returnContext method_return() {
		Method_returnContext _localctx = new Method_returnContext(Context, State);
		EnterRule(_localctx, 22, RULE_method_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(RETURN_KEYWORD);
			State = 179; _localctx._val_or_id = val_or_id(curBlock.createOperationClass());

				_localctx.type =  _localctx._val_or_id.type;
				_localctx.value =  _localctx._val_or_id.value;

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public string funName;
		public Var_signatureContext[] var_signature() {
			return GetRuleContexts<Var_signatureContext>();
		}
		public Var_signatureContext var_signature(int i) {
			return GetRuleContext<Var_signatureContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NinjaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NinjaParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ParamsContext(ParserRuleContext parent, int invokingState, string funName)
			: base(parent, invokingState)
		{
			this.funName = funName;
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params(string funName) {
		ParamsContext _localctx = new ParamsContext(Context, State, funName);
		EnterRule(_localctx, 24, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY))) != 0)) {
				{
				State = 182; var_signature(funName);
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 183; Match(COMMA);
					State = 184; var_signature(funName);
					}
					}
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_signatureContext : ParserRuleContext {
		public string funName;
		public MeaningfulTypeContext _meaningfulType;
		public IToken _ID;
		public MeaningfulTypeContext meaningfulType() {
			return GetRuleContext<MeaningfulTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(NinjaParser.ID, 0); }
		public Var_signatureContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Var_signatureContext(ParserRuleContext parent, int invokingState, string funName)
			: base(parent, invokingState)
		{
			this.funName = funName;
		}
		public override int RuleIndex { get { return RULE_var_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterVar_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitVar_signature(this);
		}
	}

	[RuleVersion(0)]
	public Var_signatureContext var_signature(string funName) {
		Var_signatureContext _localctx = new Var_signatureContext(Context, State, funName);
		EnterRule(_localctx, 26, RULE_var_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; _localctx._meaningfulType = meaningfulType();
			State = 193; _localctx._ID = Match(ID);

								VarData newVar = new VarData();
								newVar.name = (_localctx._ID!=null?_localctx._ID.Text:null);
								switch ((_localctx._meaningfulType!=null?TokenStream.GetText(_localctx._meaningfulType.Start,_localctx._meaningfulType.Stop):null))
								{
									case "int":
										newVar.type = VarType.Int;
										newVar.value = 0;
										break;
										
									case "double":
										newVar.type = VarType.Double;
										newVar.value = 0.0;
										break;
										
									case "bool":
										newVar.type = VarType.Bool;
										newVar.value = false;
										break;
								}
								ParamData pData = new ParamData();
								pData.name = (_localctx._ID!=null?_localctx._ID.Text:null);
								pData.type = newVar.type;
								metTable[funName].paramList.Add(pData);
								metTable[funName].varTable[(_localctx._ID!=null?_localctx._ID.Text:null)] = newVar;
							
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_func_pContext : ParserRuleContext {
		public Builtin_func_pContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_func_p; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBuiltin_func_p(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBuiltin_func_p(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_func_pContext builtin_func_p() {
		Builtin_func_pContext _localctx = new Builtin_func_pContext(Context, State);
		EnterRule(_localctx, 28, RULE_builtin_func_p);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_func_eContext : ParserRuleContext {
		public Builtin_func_eContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_func_e; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBuiltin_func_e(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBuiltin_func_e(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_func_eContext builtin_func_e() {
		Builtin_func_eContext _localctx = new Builtin_func_eContext(Context, State);
		EnterRule(_localctx, 30, RULE_builtin_func_e);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public OperationClass oper;
		public Parameterized_callContext _parameterized_call;
		public Simple_callContext _simple_call;
		public Parameterized_callContext parameterized_call() {
			return GetRuleContext<Parameterized_callContext>(0);
		}
		public Simple_callContext simple_call() {
			return GetRuleContext<Simple_callContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public CallContext(ParserRuleContext parent, int invokingState, OperationClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call(OperationClass oper) {
		CallContext _localctx = new CallContext(Context, State, oper);
		EnterRule(_localctx, 32, RULE_call);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200; _localctx._parameterized_call = parameterized_call();


					CallData data = new CallData(){
						callType = CallType.BuiltIn, 
						name = (_localctx._parameterized_call!=null?TokenStream.GetText(_localctx._parameterized_call.Start,_localctx._parameterized_call.Stop):null).Substring(0, (_localctx._parameterized_call!=null?TokenStream.GetText(_localctx._parameterized_call.Start,_localctx._parameterized_call.Stop):null).IndexOf("(")),
						returnType = ReturnType.Void
					};
					ParamData d = new ParamData()
					{
						type = VarType.Double, 
						value = _localctx._parameterized_call.ariphExprEx().GetText()
					};
				    d.paramType = ParamType.Pass;				
				    data.paramList.Add(d);
					
					string methodName = currentMet;
					if(methodName != "?"){
						metTable[methodName].callList.Add(data);
					}


				}
				break;
			case T__2:
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; _localctx._simple_call = simple_call();


					CallData data = new CallData(){
						callType = CallType.BuiltIn, 
						name = (_localctx._simple_call!=null?TokenStream.GetText(_localctx._simple_call.Start,_localctx._simple_call.Stop):null).Substring(0, (_localctx._simple_call!=null?TokenStream.GetText(_localctx._simple_call.Start,_localctx._simple_call.Stop):null).IndexOf("(")),
						returnType = ReturnType.Void
					};

					string methodName = currentMet;
					if(methodName != "?"){
						metTable[methodName].callList.Add(data);
					}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterized_callContext : ParserRuleContext {
		public Builtin_func_pContext builtin_func_p() {
			return GetRuleContext<Builtin_func_pContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public Parameterized_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterized_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterParameterized_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitParameterized_call(this);
		}
	}

	[RuleVersion(0)]
	public Parameterized_callContext parameterized_call() {
		Parameterized_callContext _localctx = new Parameterized_callContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameterized_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; builtin_func_p();
			State = 209; Match(LPAREN);
			State = 210; ariphExprEx(new ExprClass(curBlock.createOperationClass()));
			State = 211; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_callContext : ParserRuleContext {
		public Builtin_func_eContext builtin_func_e() {
			return GetRuleContext<Builtin_func_eContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public Simple_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterSimple_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitSimple_call(this);
		}
	}

	[RuleVersion(0)]
	public Simple_callContext simple_call() {
		Simple_callContext _localctx = new Simple_callContext(Context, State);
		EnterRule(_localctx, 36, RULE_simple_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; builtin_func_e();
			State = 214; Match(LPAREN);
			State = 215; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Custom_callContext : ParserRuleContext {
		public OperationClass oper;
		public string funName;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(NinjaParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public Call_paramsContext call_params() {
			return GetRuleContext<Call_paramsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public Custom_callContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Custom_callContext(ParserRuleContext parent, int invokingState, OperationClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_custom_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCustom_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCustom_call(this);
		}
	}

	[RuleVersion(0)]
	public Custom_callContext custom_call(OperationClass oper) {
		Custom_callContext _localctx = new Custom_callContext(Context, State, oper);
		EnterRule(_localctx, 38, RULE_custom_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; _localctx._ID = Match(ID);
			State = 218; Match(LPAREN);
			State = 219; call_params(_localctx.oper);
			State = 220; Match(RPAREN);


				string callName = (_localctx._ID!=null?_localctx._ID.Text:null);
				_localctx.funName =  callName;
				CallData data = new CallData(){
					callType = CallType.Custom, 
					name = callName
				};

				foreach (var par in _localctx.call_params().val_or_id())
				{
				
					ParamData d = new ParamData();
					d.paramType = ParamType.Pass;
					switch (par.type)
			        {
			        	case "int":
			        		d.type = VarType.Int;		
			        		break;
			        	case "double":
			        		d.type = VarType.Double;
			        		break;
			        	case "bool":
			        		d.type = VarType.Bool;
			        		break;
			        	//case "other":
			        	//	break;
			        						
			        	default:
			        		throw new NotImplementedException();
			        }
			        d.value = par.value;
					data.paramList.Add(d);    			
				}
				
				string methodName = currentMet;
			    if(methodName != "?" && CheckParams(data, metTable[callName])){
			    	metTable[methodName].callList.Add(data);
			    }


			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_paramsContext : ParserRuleContext {
		public OperationClass oper;
		public Val_or_idContext[] val_or_id() {
			return GetRuleContexts<Val_or_idContext>();
		}
		public Val_or_idContext val_or_id(int i) {
			return GetRuleContext<Val_or_idContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NinjaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NinjaParser.COMMA, i);
		}
		public Call_paramsContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Call_paramsContext(ParserRuleContext parent, int invokingState, OperationClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_call_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCall_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCall_params(this);
		}
	}

	[RuleVersion(0)]
	public Call_paramsContext call_params(OperationClass oper) {
		Call_paramsContext _localctx = new Call_paramsContext(Context, State, oper);
		EnterRule(_localctx, 40, RULE_call_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN) | (1L << ID))) != 0)) {
				{
				State = 223; val_or_id(_localctx.oper);
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 224; Match(COMMA);
					State = 225; val_or_id(_localctx.oper);
					}
					}
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Val_or_idContext : ParserRuleContext {
		public OperationClass oper;
		public string type;
		public dynamic value;
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public Val_or_idContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Val_or_idContext(ParserRuleContext parent, int invokingState, OperationClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_val_or_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterVal_or_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitVal_or_id(this);
		}
	}

	[RuleVersion(0)]
	public Val_or_idContext val_or_id(OperationClass oper) {
		Val_or_idContext _localctx = new Val_or_idContext(Context, State, oper);
		EnterRule(_localctx, 42, RULE_val_or_id);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233; ariphExprEx(curBlock.ToExpr());

								_localctx.value =  0;
								if (false) //ariphExprEx.value.GetType() == typeof(int)")
									_localctx.type =  "int";
								else
									_localctx.type =  "double";
							
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; boolExprEx(curBlock.ToExpr());

								_localctx.value =  false;
								_localctx.type =  "bool";
							
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphOperandContext : ParserRuleContext {
		public ExprClass oper;
		public IToken _INT;
		public IToken _DOUBLE;
		public AriphIDContext _ariphID;
		public ITerminalNode INT() { return GetToken(NinjaParser.INT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(NinjaParser.DOUBLE, 0); }
		public Custom_callContext custom_call() {
			return GetRuleContext<Custom_callContext>(0);
		}
		public AriphIDContext ariphID() {
			return GetRuleContext<AriphIDContext>(0);
		}
		public TrigContext trig() {
			return GetRuleContext<TrigContext>(0);
		}
		public Trig2Context trig2() {
			return GetRuleContext<Trig2Context>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public AriphOperandContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public AriphOperandContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_ariphOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAriphOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAriphOperand(this);
		}
	}

	[RuleVersion(0)]
	public AriphOperandContext ariphOperand(ExprClass oper) {
		AriphOperandContext _localctx = new AriphOperandContext(Context, State, oper);
		EnterRule(_localctx, 44, RULE_ariphOperand);
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241; _localctx._INT = Match(INT);

				                   _localctx.oper.Push(new ExprStackObject(int.Parse((_localctx._INT!=null?_localctx._INT.Text:null))));
				               
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; _localctx._DOUBLE = Match(DOUBLE);

									double value;
				               		try 
				               		{
				                   		value = double.Parse((_localctx._DOUBLE!=null?_localctx._DOUBLE.Text:null));
				                   	} 
				                   	catch
				                   	{
				                   		value = double.Parse((_localctx._DOUBLE!=null?_localctx._DOUBLE.Text:null).Replace('.', ','));
				                   	}
									_localctx.oper.Push(new ExprStackObject(value));
				               
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245; custom_call(_localctx.oper);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 246; _localctx._ariphID = ariphID(_localctx.oper);

				                   Console.WriteLine($"founy idd {(_localctx._ariphID!=null?TokenStream.GetText(_localctx._ariphID.Start,_localctx._ariphID.Stop):null)} val undefined");
				               
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 249; trig(_localctx.oper);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 250; trig2(_localctx.oper);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 251; Match(LPAREN);
				State = 252; ariphExprEx(_localctx.oper);
				State = 253; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphTermContext : ParserRuleContext {
		public ExprClass oper;
		public AriphOperandContext _ariphOperand;
		public IToken muldiv;
		public AriphOperandContext[] ariphOperand() {
			return GetRuleContexts<AriphOperandContext>();
		}
		public AriphOperandContext ariphOperand(int i) {
			return GetRuleContext<AriphOperandContext>(i);
		}
		public ITerminalNode[] MUL() { return GetTokens(NinjaParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(NinjaParser.MUL, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(NinjaParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(NinjaParser.DIV, i);
		}
		public AriphTermContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public AriphTermContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_ariphTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAriphTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAriphTerm(this);
		}
	}

	[RuleVersion(0)]
	public AriphTermContext ariphTerm(ExprClass oper) {
		AriphTermContext _localctx = new AriphTermContext(Context, State, oper);
		EnterRule(_localctx, 46, RULE_ariphTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; _localctx._ariphOperand = ariphOperand(_localctx.oper);

			                Debug("\t terarpy1 operand\"" + (_localctx._ariphOperand!=null?TokenStream.GetText(_localctx._ariphOperand.Start,_localctx._ariphOperand.Stop):null) + "\"");
			            
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MUL || _la==DIV) {
				{
				{
				State = 259;
				_localctx.muldiv = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MUL || _la==DIV) ) {
					_localctx.muldiv = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 260; _localctx._ariphOperand = ariphOperand(_localctx.oper);
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}

							if ((_localctx.muldiv!=null?_localctx.muldiv.Text:null) != null)
							{
								_localctx.oper.Push(new ExprStackObject()
								 {
									type = ObjType.Operation,
									value = (_localctx.muldiv!=null?_localctx.muldiv.Text:null)
								 });
								Debug("\t terarpy2 operand\"" + (_localctx._ariphOperand!=null?TokenStream.GetText(_localctx._ariphOperand.Start,_localctx._ariphOperand.Stop):null) + "\"");
							}
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphExprContext : ParserRuleContext {
		public ExprClass oper;
		public AriphTermContext _ariphTerm;
		public IToken addsub;
		public AriphTermContext[] ariphTerm() {
			return GetRuleContexts<AriphTermContext>();
		}
		public AriphTermContext ariphTerm(int i) {
			return GetRuleContext<AriphTermContext>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(NinjaParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(NinjaParser.ADD, i);
		}
		public ITerminalNode[] SUB() { return GetTokens(NinjaParser.SUB); }
		public ITerminalNode SUB(int i) {
			return GetToken(NinjaParser.SUB, i);
		}
		public AriphExprContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public AriphExprContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_ariphExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAriphExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAriphExpr(this);
		}
	}

	[RuleVersion(0)]
	public AriphExprContext ariphExpr(ExprClass oper) {
		AriphExprContext _localctx = new AriphExprContext(Context, State, oper);
		EnterRule(_localctx, 48, RULE_ariphExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; _localctx._ariphTerm = ariphTerm(_localctx.oper);

			                Debug("\t rarpy1 term\"" + (_localctx._ariphTerm!=null?TokenStream.GetText(_localctx._ariphTerm.Start,_localctx._ariphTerm.Stop):null) + "\"");
			            
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 270;
				_localctx.addsub = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
					_localctx.addsub = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 271; _localctx._ariphTerm = ariphTerm(_localctx.oper);
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}

							if ((_localctx.addsub!=null?_localctx.addsub.Text:null) != null)
							{
								_localctx.oper.Push(new ExprStackObject()
								 {
									type = ObjType.Operation,
									value = (_localctx.addsub!=null?_localctx.addsub.Text:null)
								 });
								 Debug("\t rarpy2 term\"" + (_localctx._ariphTerm!=null?TokenStream.GetText(_localctx._ariphTerm.Start,_localctx._ariphTerm.Stop):null) + "\"");
							}
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphExprExContext : ParserRuleContext {
		public ExprClass oper;
		public AriphExprContext _ariphExpr;
		public IToken assigns;
		public AriphExprExContext _ariphExprEx;
		public AriphExprContext ariphExpr() {
			return GetRuleContext<AriphExprContext>(0);
		}
		public AriphIDContext ariphID() {
			return GetRuleContext<AriphIDContext>(0);
		}
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(NinjaParser.ASSIGN, 0); }
		public ITerminalNode ADDASSIGN() { return GetToken(NinjaParser.ADDASSIGN, 0); }
		public ITerminalNode SUBASSIGN() { return GetToken(NinjaParser.SUBASSIGN, 0); }
		public ITerminalNode MULASSIGN() { return GetToken(NinjaParser.MULASSIGN, 0); }
		public ITerminalNode DIVASSIGN() { return GetToken(NinjaParser.DIVASSIGN, 0); }
		public AriphExprExContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public AriphExprExContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_ariphExprEx; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAriphExprEx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAriphExprEx(this);
		}
	}

	[RuleVersion(0)]
	public AriphExprExContext ariphExprEx(ExprClass oper) {
		AriphExprExContext _localctx = new AriphExprExContext(Context, State, oper);
		EnterRule(_localctx, 50, RULE_ariphExprEx);
		int _la;
		try {
			State = 287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; _localctx._ariphExpr = ariphExpr(_localctx.oper);

				                Debug("\t arpy1 expr\"" + (_localctx._ariphExpr!=null?TokenStream.GetText(_localctx._ariphExpr.Start,_localctx._ariphExpr.Stop):null) + "\"");
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282; ariphID(_localctx.oper);
				State = 283;
				_localctx.assigns = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << ADDASSIGN) | (1L << SUBASSIGN) | (1L << MULASSIGN) | (1L << DIVASSIGN))) != 0)) ) {
					_localctx.assigns = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 284; _localctx._ariphExprEx = ariphExprEx(_localctx.oper);

				                _localctx.oper.Push(new ExprStackObject()
									 {
										type = ObjType.Operation,
										value = (_localctx.assigns!=null?_localctx.assigns.Text:null)
									 });
								Debug("\t arpy2 expr\"" + (_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) + "\"");
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOperandContext : ParserRuleContext {
		public ExprClass oper;
		public IToken _BOOL;
		public IToken comp;
		public ITerminalNode BOOL() { return GetToken(NinjaParser.BOOL, 0); }
		public BoolIDContext boolID() {
			return GetRuleContext<BoolIDContext>(0);
		}
		public AriphExprExContext[] ariphExprEx() {
			return GetRuleContexts<AriphExprExContext>();
		}
		public AriphExprExContext ariphExprEx(int i) {
			return GetRuleContext<AriphExprExContext>(i);
		}
		public ITerminalNode LESS() { return GetToken(NinjaParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(NinjaParser.GREATER, 0); }
		public ITerminalNode EQUAL() { return GetToken(NinjaParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(NinjaParser.NOTEQUAL, 0); }
		public ITerminalNode LESSEQUAL() { return GetToken(NinjaParser.LESSEQUAL, 0); }
		public ITerminalNode GREQUAL() { return GetToken(NinjaParser.GREQUAL, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public BoolOperandContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public BoolOperandContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_boolOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBoolOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBoolOperand(this);
		}
	}

	[RuleVersion(0)]
	public BoolOperandContext boolOperand(ExprClass oper) {
		BoolOperandContext _localctx = new BoolOperandContext(Context, State, oper);
		EnterRule(_localctx, 52, RULE_boolOperand);
		int _la;
		try {
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289; _localctx._BOOL = Match(BOOL);

				                  _localctx.oper.Push(new ExprStackObject(bool.Parse((_localctx._BOOL!=null?_localctx._BOOL.Text:null))));
				              
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291; boolID(_localctx.oper);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 292; ariphExprEx(_localctx.oper);
				State = 293;
				_localctx.comp = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << GREATER) | (1L << EQUAL) | (1L << NOTEQUAL) | (1L << LESSEQUAL) | (1L << GREQUAL))) != 0)) ) {
					_localctx.comp = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 294; ariphExprEx(_localctx.oper);

								_localctx.oper.Push(new ExprStackObject()
								{
									type = ObjType.Operation,
									value = (_localctx.comp!=null?_localctx.comp.Text:null)
								}); 
							  
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 297; Match(LPAREN);
				State = 298; boolExprEx(_localctx.oper);
				State = 299; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		public ExprClass oper;
		public IToken andor;
		public BoolOperandContext boolOperand() {
			return GetRuleContext<BoolOperandContext>(0);
		}
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public ITerminalNode AND() { return GetToken(NinjaParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(NinjaParser.OR, 0); }
		public BoolExprContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public BoolExprContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBoolExpr(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr(ExprClass oper) {
		BoolExprContext _localctx = new BoolExprContext(Context, State, oper);
		EnterRule(_localctx, 54, RULE_boolExpr);
		int _la;
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303; boolOperand(_localctx.oper);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304; boolOperand(_localctx.oper);
				State = 305;
				_localctx.andor = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AND || _la==OR) ) {
					_localctx.andor = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 306; boolExpr(_localctx.oper);

								_localctx.oper.Push(new ExprStackObject()
								{
									type = ObjType.Operation,
									value = (_localctx.andor!=null?_localctx.andor.Text:null)
								});
				           
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExprExContext : ParserRuleContext {
		public ExprClass oper;
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public BoolIDContext boolID() {
			return GetRuleContext<BoolIDContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(NinjaParser.ASSIGN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public BoolExprExContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public BoolExprExContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_boolExprEx; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBoolExprEx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBoolExprEx(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprExContext boolExprEx(ExprClass oper) {
		BoolExprExContext _localctx = new BoolExprExContext(Context, State, oper);
		EnterRule(_localctx, 56, RULE_boolExprEx);
		try {
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311; boolExpr(_localctx.oper);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 312; boolID(_localctx.oper);
				State = 313; Match(ASSIGN);
				State = 314; boolExprEx(_localctx.oper);

								_localctx.oper.Push(new ExprStackObject()
								{
									type = ObjType.Operation,
									value = "="
								});
				           
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ExprClass oper;
		public AriphIDContext _ariphID;
		public AriphExprExContext _ariphExprEx;
		public BoolIDContext _boolID;
		public BoolExprExContext _boolExprEx;
		public ITerminalNode INTKEY() { return GetToken(NinjaParser.INTKEY, 0); }
		public AriphIDContext ariphID() {
			return GetRuleContext<AriphIDContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(NinjaParser.ASSIGN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode DOUBLEKEY() { return GetToken(NinjaParser.DOUBLEKEY, 0); }
		public ITerminalNode BOOLKEY() { return GetToken(NinjaParser.BOOLKEY, 0); }
		public BoolIDContext boolID() {
			return GetRuleContext<BoolIDContext>(0);
		}
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public DeclareContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare(ExprClass oper) {
		DeclareContext _localctx = new DeclareContext(Context, State, oper);
		EnterRule(_localctx, 58, RULE_declare);
		int _la;
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTKEY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319; Match(INTKEY);
				State = 320; _localctx._ariphID = ariphID(_localctx.oper);

				           VarData newVar = new VarData
				           {
				                type = VarType.Int,
				                value = 0
				           };
				           curBlock.varTable.Add((_localctx._ariphID!=null?TokenStream.GetText(_localctx._ariphID.Start,_localctx._ariphID.Stop):null), newVar);
				           Debug("Create var " + (_localctx._ariphID!=null?TokenStream.GetText(_localctx._ariphID.Start,_localctx._ariphID.Stop):null));
				          
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 322; Match(ASSIGN);
					State = 323; _localctx._ariphExprEx = ariphExprEx(_localctx.oper);
					}
				}


				           if ((_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) != null)
				           {
								Debug("\tAssigning it value of " + (_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null));
								_localctx.oper.Push(new ExprStackObject()
									 {
										type = ObjType.Operation,
										value = "="
									 });
				           }
				          
				}
				break;
			case DOUBLEKEY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328; Match(DOUBLEKEY);
				State = 329; _localctx._ariphID = ariphID(_localctx.oper);

				           VarData newVar = new VarData
				           {
				                type = VarType.Double,
				                value = 0.0
				           };
				           curBlock.varTable.Add((_localctx._ariphID!=null?TokenStream.GetText(_localctx._ariphID.Start,_localctx._ariphID.Stop):null), newVar);
				           Debug("Create var " + (_localctx._ariphID!=null?TokenStream.GetText(_localctx._ariphID.Start,_localctx._ariphID.Stop):null));
				          
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 331; Match(ASSIGN);
					State = 332; _localctx._ariphExprEx = ariphExprEx(_localctx.oper);
					}
				}


				           if ((_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) != null)
				           {
				                Debug("\tAssigning it value of " + (_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null));
				                _localctx.oper.Push(new ExprStackObject()
									 {
										type = ObjType.Operation,
										value = "="
									 });
				           }
				          
				}
				break;
			case BOOLKEY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 337; Match(BOOLKEY);
				State = 338; _localctx._boolID = boolID(_localctx.oper);

				           VarData newVar = new VarData
				           {
				                type = VarType.Bool,
				                value = false
				           };
				           curBlock.varTable.Add((_localctx._boolID!=null?TokenStream.GetText(_localctx._boolID.Start,_localctx._boolID.Stop):null), newVar);
				           Debug("Create var " + (_localctx._boolID!=null?TokenStream.GetText(_localctx._boolID.Start,_localctx._boolID.Stop):null));
				          
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 340; Match(ASSIGN);
					State = 341; _localctx._boolExprEx = boolExprEx(_localctx.oper);
					}
				}


				           if ((_localctx._boolExprEx!=null?TokenStream.GetText(_localctx._boolExprEx.Start,_localctx._boolExprEx.Stop):null) != null)
				           {
				                Debug("\tAssigning3 it value of " + (_localctx._boolExprEx!=null?TokenStream.GetText(_localctx._boolExprEx.Start,_localctx._boolExprEx.Stop):null));
				                _localctx.oper.Push(new ExprStackObject()
								{
									type = ObjType.Operation,
									value = "="
								});
				           }
				          
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphIDContext : ParserRuleContext {
		public ExprClass oper;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(NinjaParser.ID, 0); }
		public AriphIDContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public AriphIDContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_ariphID; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAriphID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAriphID(this);
		}
	}

	[RuleVersion(0)]
	public AriphIDContext ariphID(ExprClass oper) {
		AriphIDContext _localctx = new AriphIDContext(Context, State, oper);
		EnterRule(_localctx, 60, RULE_ariphID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; _localctx._ID = Match(ID);

						_localctx.oper.Push(new ExprStackObject()
								 {
									type = ObjType.Var,
									value = (_localctx._ID!=null?_localctx._ID.Text:null)
								 });
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolIDContext : ParserRuleContext {
		public ExprClass oper;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(NinjaParser.ID, 0); }
		public BoolIDContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public BoolIDContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_boolID; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBoolID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBoolID(this);
		}
	}

	[RuleVersion(0)]
	public BoolIDContext boolID(ExprClass oper) {
		BoolIDContext _localctx = new BoolIDContext(Context, State, oper);
		EnterRule(_localctx, 62, RULE_boolID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; _localctx._ID = Match(ID);

						_localctx.oper.Push(new ExprStackObject()
								 {
									type = ObjType.Var,
									value = (_localctx._ID!=null?_localctx._ID.Text:null)
								 });
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrigContext : ParserRuleContext {
		public ExprClass oper;
		public IToken trfun;
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public ITerminalNode SIN() { return GetToken(NinjaParser.SIN, 0); }
		public ITerminalNode COS() { return GetToken(NinjaParser.COS, 0); }
		public ITerminalNode TAN() { return GetToken(NinjaParser.TAN, 0); }
		public ITerminalNode ASIN() { return GetToken(NinjaParser.ASIN, 0); }
		public ITerminalNode ACOS() { return GetToken(NinjaParser.ACOS, 0); }
		public ITerminalNode ATAN() { return GetToken(NinjaParser.ATAN, 0); }
		public TrigContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public TrigContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_trig; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterTrig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitTrig(this);
		}
	}

	[RuleVersion(0)]
	public TrigContext trig(ExprClass oper) {
		TrigContext _localctx = new TrigContext(Context, State, oper);
		EnterRule(_localctx, 64, RULE_trig);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			_localctx.trfun = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN))) != 0)) ) {
				_localctx.trfun = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 355; Match(LPAREN);
			State = 356; ariphExprEx(_localctx.oper);
			State = 357; Match(RPAREN);

						_localctx.oper.Push(new ExprStackObject()
								 {
									type = ObjType.Operation,
									value = (_localctx.trfun!=null?_localctx.trfun.Text:null)
								 });
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trig2Context : ParserRuleContext {
		public ExprClass oper;
		public ITerminalNode ATAN2() { return GetToken(NinjaParser.ATAN2, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext[] ariphExprEx() {
			return GetRuleContexts<AriphExprExContext>();
		}
		public AriphExprExContext ariphExprEx(int i) {
			return GetRuleContext<AriphExprExContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(NinjaParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public Trig2Context(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Trig2Context(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_trig2; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterTrig2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitTrig2(this);
		}
	}

	[RuleVersion(0)]
	public Trig2Context trig2(ExprClass oper) {
		Trig2Context _localctx = new Trig2Context(Context, State, oper);
		EnterRule(_localctx, 66, RULE_trig2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(ATAN2);
			State = 361; Match(LPAREN);
			State = 362; ariphExprEx(_localctx.oper);
			State = 363; Match(COMMA);
			State = 364; ariphExprEx(_localctx.oper);
			State = 365; Match(RPAREN);

						_localctx.oper.Push(new ExprStackObject()
								 {
									type = ObjType.Operation,
									value = "atan2"
								 });
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinContext : ParserRuleContext {
		public double value;
		public ITerminalNode SIN() { return GetToken(NinjaParser.SIN, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public SinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sin; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterSin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitSin(this);
		}
	}

	[RuleVersion(0)]
	public SinContext sin() {
		SinContext _localctx = new SinContext(Context, State);
		EnterRule(_localctx, 68, RULE_sin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; Match(SIN);
			State = 369; Match(LPAREN);
			State = 370; ariphExprEx(null);
			State = 371; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CosContext : ParserRuleContext {
		public double value;
		public ITerminalNode COS() { return GetToken(NinjaParser.COS, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public CosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cos; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCos(this);
		}
	}

	[RuleVersion(0)]
	public CosContext cos() {
		CosContext _localctx = new CosContext(Context, State);
		EnterRule(_localctx, 70, RULE_cos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(COS);
			State = 374; Match(LPAREN);
			State = 375; ariphExprEx(null);
			State = 376; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TanContext : ParserRuleContext {
		public double value;
		public ITerminalNode TAN() { return GetToken(NinjaParser.TAN, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public TanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tan; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterTan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitTan(this);
		}
	}

	[RuleVersion(0)]
	public TanContext tan() {
		TanContext _localctx = new TanContext(Context, State);
		EnterRule(_localctx, 72, RULE_tan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(TAN);
			State = 379; Match(LPAREN);
			State = 380; ariphExprEx(null);
			State = 381; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsinContext : ParserRuleContext {
		public double value;
		public ITerminalNode ASIN() { return GetToken(NinjaParser.ASIN, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public AsinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asin; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAsin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAsin(this);
		}
	}

	[RuleVersion(0)]
	public AsinContext asin() {
		AsinContext _localctx = new AsinContext(Context, State);
		EnterRule(_localctx, 74, RULE_asin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(ASIN);
			State = 384; Match(LPAREN);
			State = 385; ariphExprEx(null);
			State = 386; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcosContext : ParserRuleContext {
		public double value;
		public ITerminalNode ACOS() { return GetToken(NinjaParser.ACOS, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public AcosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acos; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAcos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAcos(this);
		}
	}

	[RuleVersion(0)]
	public AcosContext acos() {
		AcosContext _localctx = new AcosContext(Context, State);
		EnterRule(_localctx, 76, RULE_acos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(ACOS);
			State = 389; Match(LPAREN);
			State = 390; ariphExprEx(null);
			State = 391; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtanContext : ParserRuleContext {
		public double value;
		public ITerminalNode ATAN() { return GetToken(NinjaParser.ATAN, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public AtanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atan; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAtan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAtan(this);
		}
	}

	[RuleVersion(0)]
	public AtanContext atan() {
		AtanContext _localctx = new AtanContext(Context, State);
		EnterRule(_localctx, 78, RULE_atan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(ATAN);
			State = 394; Match(LPAREN);
			State = 395; ariphExprEx(null);
			State = 396; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atan2Context : ParserRuleContext {
		public double value;
		public AriphExprExContext y;
		public AriphExprExContext x;
		public ITerminalNode ATAN2() { return GetToken(NinjaParser.ATAN2, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(NinjaParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public AriphExprExContext[] ariphExprEx() {
			return GetRuleContexts<AriphExprExContext>();
		}
		public AriphExprExContext ariphExprEx(int i) {
			return GetRuleContext<AriphExprExContext>(i);
		}
		public Atan2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atan2; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAtan2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAtan2(this);
		}
	}

	[RuleVersion(0)]
	public Atan2Context atan2() {
		Atan2Context _localctx = new Atan2Context(Context, State);
		EnterRule(_localctx, 80, RULE_atan2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(ATAN2);
			State = 399; Match(LPAREN);
			State = 400; _localctx.y = ariphExprEx(null);
			State = 401; Match(COMMA);
			State = 402; _localctx.x = ariphExprEx(null);
			State = 403; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MyifContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(NinjaParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public ITerminalNode[] OBRACE() { return GetTokens(NinjaParser.OBRACE); }
		public ITerminalNode OBRACE(int i) {
			return GetToken(NinjaParser.OBRACE, i);
		}
		public ITerminalNode[] CBRACE() { return GetTokens(NinjaParser.CBRACE); }
		public ITerminalNode CBRACE(int i) {
			return GetToken(NinjaParser.CBRACE, i);
		}
		public ITerminalNode ELSE() { return GetToken(NinjaParser.ELSE, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public MyifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_myif; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMyif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMyif(this);
		}
	}

	[RuleVersion(0)]
	public MyifContext myif() {
		MyifContext _localctx = new MyifContext(Context, State);
		EnterRule(_localctx, 82, RULE_myif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405; Match(IF);
			State = 406; Match(LPAREN);
			State = 407; boolExprEx(null);
			State = 408; Match(RPAREN);
			State = 409; Match(OBRACE);
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 410; operation(null);
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN) | (1L << ID))) != 0) );
			State = 415; Match(CBRACE);
			State = 416; Match(ELSE);
			State = 417; Match(OBRACE);
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 418; operation(null);
				}
				}
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN) | (1L << ID))) != 0) );
			State = 423; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Myif_shortContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(NinjaParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public Myif_shortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_myif_short; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMyif_short(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMyif_short(this);
		}
	}

	[RuleVersion(0)]
	public Myif_shortContext myif_short() {
		Myif_shortContext _localctx = new Myif_shortContext(Context, State);
		EnterRule(_localctx, 84, RULE_myif_short);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425; Match(IF);
			State = 426; Match(LPAREN);
			State = 427; boolExprEx(null);
			State = 428; Match(RPAREN);
			State = 429; Match(OBRACE);
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 430; operation(null);
				}
				}
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN) | (1L << ID))) != 0) );
			State = 435; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MywhileContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(NinjaParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public MywhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mywhile; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMywhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMywhile(this);
		}
	}

	[RuleVersion(0)]
	public MywhileContext mywhile() {
		MywhileContext _localctx = new MywhileContext(Context, State);
		EnterRule(_localctx, 86, RULE_mywhile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(WHILE);
			State = 438; Match(LPAREN);
			State = 439; boolExprEx(null);
			State = 440; Match(RPAREN);
			State = 441; Match(OBRACE);
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 442; operation(null);
				}
				}
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN) | (1L << ID))) != 0) );
			State = 447; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mydo_whileContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(NinjaParser.DO, 0); }
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public ITerminalNode WHILE() { return GetToken(NinjaParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public Mydo_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mydo_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMydo_while(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMydo_while(this);
		}
	}

	[RuleVersion(0)]
	public Mydo_whileContext mydo_while() {
		Mydo_whileContext _localctx = new Mydo_whileContext(Context, State);
		EnterRule(_localctx, 88, RULE_mydo_while);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; Match(DO);
			State = 450; Match(OBRACE);
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 451; operation(null);
				}
				}
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN) | (1L << ID))) != 0) );
			State = 456; Match(CBRACE);
			State = 457; Match(WHILE);
			State = 458; Match(LPAREN);
			State = 459; boolExprEx(null);
			State = 460; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MyforContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(NinjaParser.FOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(NinjaParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(NinjaParser.SEMICOLON, i);
		}
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public MyforContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_myfor; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMyfor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMyfor(this);
		}
	}

	[RuleVersion(0)]
	public MyforContext myfor() {
		MyforContext _localctx = new MyforContext(Context, State);
		EnterRule(_localctx, 90, RULE_myfor);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; Match(FOR);
			State = 463; Match(LPAREN);
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 464;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << ELSE) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << ADD) | (1L << SUB) | (1L << MUL) | (1L << DIV) | (1L << ASSIGN) | (1L << ADDASSIGN) | (1L << SUBASSIGN) | (1L << MULASSIGN) | (1L << DIVASSIGN) | (1L << AND) | (1L << OR) | (1L << LESS) | (1L << GREATER) | (1L << EQUAL) | (1L << NOTEQUAL) | (1L << LESSEQUAL) | (1L << GREQUAL) | (1L << WS) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << RETURN_KEYWORD) | (1L << PASS) | (1L << MAIN) | (1L << FUN_KEYWORD) | (1L << VOID) | (1L << COMMA) | (1L << OBRACE) | (1L << CBRACE) | (1L << LPAREN) | (1L << RPAREN) | (1L << COMMENT) | (1L << STRING) | (1L << ID))) != 0) );
			State = 469; Match(SEMICOLON);
			State = 470; boolExprEx(null);
			State = 471; Match(SEMICOLON);
			State = 473;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 472;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SEMICOLON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 475;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 477; Match(RPAREN);
			State = 478; Match(OBRACE);
			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 479; operation(null);
				}
				}
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN) | (1L << ID))) != 0) );
			State = 484; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeaningfulTypeContext : ParserRuleContext {
		public ITerminalNode INTKEY() { return GetToken(NinjaParser.INTKEY, 0); }
		public ITerminalNode DOUBLEKEY() { return GetToken(NinjaParser.DOUBLEKEY, 0); }
		public ITerminalNode BOOLKEY() { return GetToken(NinjaParser.BOOLKEY, 0); }
		public MeaningfulTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meaningfulType; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMeaningfulType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMeaningfulType(this);
		}
	}

	[RuleVersion(0)]
	public MeaningfulTypeContext meaningfulType() {
		MeaningfulTypeContext _localctx = new MeaningfulTypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_meaningfulType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x38', '\x1EB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x3', '\x2', '\a', '\x2', '\x62', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x65', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', 'i', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'l', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x7F', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\a', '\n', '\x9E', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\xA1', '\v', '\n', '\x3', '\v', '\a', '\v', '\xA4', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\xA7', '\v', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xB3', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\xBC', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\xBF', '\v', '\xE', '\x5', '\xE', '\xC1', '\n', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xD1', 
		'\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', 
		'\xE5', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xE8', '\v', '\x16', 
		'\x5', '\x16', '\xEA', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xF2', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x102', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\a', '\x19', '\x108', '\n', '\x19', '\f', '\x19', 
		'\xE', '\x19', '\x10B', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x113', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x116', '\v', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x122', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x130', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x138', '\n', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x140', '\n', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x147', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x150', '\n', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x159', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x15D', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x6', '+', '\x19E', '\n', '+', 
		'\r', '+', '\xE', '+', '\x19F', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x6', '+', '\x1A6', '\n', '+', '\r', '+', '\xE', '+', '\x1A7', '\x3', 
		'+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x6', ',', '\x1B2', '\n', ',', '\r', ',', '\xE', ',', 
		'\x1B3', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x6', '-', '\x1BE', '\n', '-', '\r', '-', 
		'\xE', '-', '\x1BF', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x6', '.', '\x1C7', '\n', '.', '\r', '.', '\xE', '.', '\x1C8', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x6', '/', '\x1D4', '\n', '/', '\r', '/', 
		'\xE', '/', '\x1D5', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x6', 
		'/', '\x1DC', '\n', '/', '\r', '/', '\xE', '/', '\x1DD', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x6', '/', '\x1E3', '\n', '/', '\r', '/', '\xE', '/', 
		'\x1E4', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x2', '\x2', '\x31', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '\x2', '\f', '\x3', '\x2', '\x3', '\x4', 
		'\x3', '\x2', '\x5', '\x6', '\x3', '\x2', '\x19', '\x1A', '\x3', '\x2', 
		'\x17', '\x18', '\x3', '\x2', '\x1B', '\x1F', '\x3', '\x2', '\"', '\'', 
		'\x3', '\x2', ' ', '!', '\x3', '\x2', '\x10', '\x15', '\x3', '\x2', '\a', 
		'\a', '\x3', '\x2', '\b', '\n', '\x2', '\x1EA', '\x2', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 'o', '\x3', '\x2', '\x2', '\x2', '\x6', 'u', 
		'\x3', '\x2', '\x2', '\x2', '\b', '~', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\f', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x10', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\x16', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xC2', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', ' ', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xD0', '\x3', '\x2', '\x2', '\x2', '$', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xD7', '\x3', '\x2', '\x2', '\x2', '(', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xE9', '\x3', '\x2', '\x2', '\x2', ',', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x103', '\x3', '\x2', '\x2', '\x2', '\x32', '\x10E', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x121', '\x3', '\x2', '\x2', '\x2', '\x36', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x137', '\x3', '\x2', '\x2', '\x2', 
		':', '\x13F', '\x3', '\x2', '\x2', '\x2', '<', '\x15C', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x15E', '\x3', '\x2', '\x2', '\x2', '@', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x46', '\x172', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x177', '\x3', '\x2', '\x2', '\x2', 'J', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x186', '\x3', '\x2', '\x2', '\x2', 'P', '\x18B', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x190', '\x3', '\x2', '\x2', '\x2', 'T', '\x197', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x1B7', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1C3', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x1D0', '\x3', '\x2', '\x2', '\x2', '^', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x62', '\x5', '\b', '\x5', '\x2', '\x61', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x66', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'j', '\x5', '\x4', '\x3', 
		'\x2', 'g', 'i', '\x5', '\b', '\x5', '\x2', 'h', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'l', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\b', '\x2', '\x1', 
		'\x2', 'n', '\x3', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x5', '\x6', 
		'\x4', '\x2', 'p', 'q', '\a', '\x32', '\x2', '\x2', 'q', 'r', '\x5', '\x14', 
		'\v', '\x2', 'r', 's', '\a', '\x33', '\x2', '\x2', 's', 't', '\b', '\x3', 
		'\x1', '\x2', 't', '\x5', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', 
		'/', '\x2', '\x2', 'v', 'w', '\a', '\x30', '\x2', '\x2', 'w', 'x', '\a', 
		'.', '\x2', '\x2', 'x', 'y', '\a', '\x34', '\x2', '\x2', 'y', 'z', '\a', 
		'\x35', '\x2', '\x2', 'z', '{', '\b', '\x4', '\x1', '\x2', '{', '\a', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x7F', '\x5', '\n', '\x6', '\x2', '}', 
		'\x7F', '\x5', '\xE', '\b', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', 
		'~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x5', '\f', '\a', '\x2', '\x81', '\x82', '\a', 
		'\x32', '\x2', '\x2', '\x82', '\x83', '\x5', '\x12', '\n', '\x2', '\x83', 
		'\x84', '\a', '\x33', '\x2', '\x2', '\x84', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x86', '\a', '/', '\x2', '\x2', '\x86', '\x87', '\a', 
		'\x30', '\x2', '\x2', '\x87', '\x88', '\a', '\x38', '\x2', '\x2', '\x88', 
		'\x89', '\b', '\a', '\x1', '\x2', '\x89', '\x8A', '\a', '\x34', '\x2', 
		'\x2', '\x8A', '\x8B', '\x5', '\x1A', '\xE', '\x2', '\x8B', '\x8C', '\a', 
		'\x35', '\x2', '\x2', '\x8C', '\r', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\x5', '\x10', '\t', '\x2', '\x8E', '\x8F', '\a', '\x32', '\x2', 
		'\x2', '\x8F', '\x90', '\x5', '\x12', '\n', '\x2', '\x90', '\x91', '\x5', 
		'\x18', '\r', '\x2', '\x91', '\x92', '\a', '\x33', '\x2', '\x2', '\x92', 
		'\x93', '\b', '\b', '\x1', '\x2', '\x93', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x95', '\a', '/', '\x2', '\x2', '\x95', '\x96', '\x5', 
		'^', '\x30', '\x2', '\x96', '\x97', '\a', '\x38', '\x2', '\x2', '\x97', 
		'\x98', '\b', '\t', '\x1', '\x2', '\x98', '\x99', '\a', '\x34', '\x2', 
		'\x2', '\x99', '\x9A', '\x5', '\x1A', '\xE', '\x2', '\x9A', '\x9B', '\a', 
		'\x35', '\x2', '\x2', '\x9B', '\x11', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9E', '\x5', '\x16', '\f', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA4', '\x5', '\x16', '\f', '\x2', '\xA3', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xB3', '\x5', '\"', '\x12', '\x2', '\xA9', 
		'\xB3', '\x5', '(', '\x15', '\x2', '\xAA', '\xB3', '\x5', '<', '\x1F', 
		'\x2', '\xAB', '\xB3', '\x5', '\x34', '\x1B', '\x2', '\xAC', '\xB3', '\x5', 
		':', '\x1E', '\x2', '\xAD', '\xB3', '\x5', 'T', '+', '\x2', '\xAE', '\xB3', 
		'\x5', 'V', ',', '\x2', '\xAF', '\xB3', '\x5', 'X', '-', '\x2', '\xB0', 
		'\xB3', '\x5', 'Z', '.', '\x2', '\xB1', '\xB3', '\x5', '\\', '/', '\x2', 
		'\xB2', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\x17', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', ',', 
		'\x2', '\x2', '\xB5', '\xB6', '\x5', ',', '\x17', '\x2', '\xB6', '\xB7', 
		'\b', '\r', '\x1', '\x2', '\xB7', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xBD', '\x5', '\x1C', '\xF', '\x2', '\xB9', '\xBA', '\a', '\x31', 
		'\x2', '\x2', '\xBA', '\xBC', '\x5', '\x1C', '\xF', '\x2', '\xBB', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC3', '\x5', '^', '\x30', '\x2', '\xC3', '\xC4', 
		'\a', '\x38', '\x2', '\x2', '\xC4', '\xC5', '\b', '\xF', '\x1', '\x2', 
		'\xC5', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\t', '\x2', 
		'\x2', '\x2', '\xC7', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\t', '\x3', '\x2', '\x2', '\xC9', '!', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\x5', '$', '\x13', '\x2', '\xCB', '\xCC', '\b', '\x12', '\x1', 
		'\x2', '\xCC', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x5', 
		'&', '\x14', '\x2', '\xCE', '\xCF', '\b', '\x12', '\x1', '\x2', '\xCF', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD1', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\x1E', '\x10', '\x2', '\xD3', 
		'\xD4', '\a', '\x34', '\x2', '\x2', '\xD4', '\xD5', '\x5', '\x34', '\x1B', 
		'\x2', '\xD5', '\xD6', '\a', '\x35', '\x2', '\x2', '\xD6', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xD8', '\x5', ' ', '\x11', '\x2', '\xD8', 
		'\xD9', '\a', '\x34', '\x2', '\x2', '\xD9', '\xDA', '\a', '\x35', '\x2', 
		'\x2', '\xDA', '\'', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', 
		'\x38', '\x2', '\x2', '\xDC', '\xDD', '\a', '\x34', '\x2', '\x2', '\xDD', 
		'\xDE', '\x5', '*', '\x16', '\x2', '\xDE', '\xDF', '\a', '\x35', '\x2', 
		'\x2', '\xDF', '\xE0', '\b', '\x15', '\x1', '\x2', '\xE0', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE6', '\x5', ',', '\x17', '\x2', '\xE2', 
		'\xE3', '\a', '\x31', '\x2', '\x2', '\xE3', '\xE5', '\x5', ',', '\x17', 
		'\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x5', '\x34', '\x1B', 
		'\x2', '\xEC', '\xED', '\b', '\x17', '\x1', '\x2', '\xED', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xEF', '\x5', ':', '\x1E', '\x2', '\xEF', 
		'\xF0', '\b', '\x17', '\x1', '\x2', '\xF0', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '-', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF4', '\a', '+', '\x2', '\x2', '\xF4', '\x102', '\b', '\x18', '\x1', 
		'\x2', '\xF5', '\xF6', '\a', '*', '\x2', '\x2', '\xF6', '\x102', '\b', 
		'\x18', '\x1', '\x2', '\xF7', '\x102', '\x5', '(', '\x15', '\x2', '\xF8', 
		'\xF9', '\x5', '>', ' ', '\x2', '\xF9', '\xFA', '\b', '\x18', '\x1', '\x2', 
		'\xFA', '\x102', '\x3', '\x2', '\x2', '\x2', '\xFB', '\x102', '\x5', '\x42', 
		'\"', '\x2', '\xFC', '\x102', '\x5', '\x44', '#', '\x2', '\xFD', '\xFE', 
		'\a', '\x34', '\x2', '\x2', '\xFE', '\xFF', '\x5', '\x34', '\x1B', '\x2', 
		'\xFF', '\x100', '\a', '\x35', '\x2', '\x2', '\x100', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xF3', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\x101', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\x102', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\x5', '.', '\x18', '\x2', '\x104', '\x109', 
		'\b', '\x19', '\x1', '\x2', '\x105', '\x106', '\t', '\x4', '\x2', '\x2', 
		'\x106', '\x108', '\x5', '.', '\x18', '\x2', '\x107', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\b', '\x19', '\x1', '\x2', 
		'\x10D', '\x31', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x5', 
		'\x30', '\x19', '\x2', '\x10F', '\x114', '\b', '\x1A', '\x1', '\x2', '\x110', 
		'\x111', '\t', '\x5', '\x2', '\x2', '\x111', '\x113', '\x5', '\x30', '\x19', 
		'\x2', '\x112', '\x110', '\x3', '\x2', '\x2', '\x2', '\x113', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x115', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x114', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x118', '\b', '\x1A', '\x1', '\x2', '\x118', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11A', '\x5', '\x32', '\x1A', '\x2', '\x11A', '\x11B', 
		'\b', '\x1B', '\x1', '\x2', '\x11B', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11D', '\x5', '>', ' ', '\x2', '\x11D', '\x11E', '\t', '\x6', 
		'\x2', '\x2', '\x11E', '\x11F', '\x5', '\x34', '\x1B', '\x2', '\x11F', 
		'\x120', '\b', '\x1B', '\x1', '\x2', '\x120', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x119', '\x3', '\x2', '\x2', '\x2', '\x121', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x124', '\a', ')', '\x2', '\x2', '\x124', '\x130', '\b', '\x1C', 
		'\x1', '\x2', '\x125', '\x130', '\x5', '@', '!', '\x2', '\x126', '\x127', 
		'\x5', '\x34', '\x1B', '\x2', '\x127', '\x128', '\t', '\a', '\x2', '\x2', 
		'\x128', '\x129', '\x5', '\x34', '\x1B', '\x2', '\x129', '\x12A', '\b', 
		'\x1C', '\x1', '\x2', '\x12A', '\x130', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x12C', '\a', '\x34', '\x2', '\x2', '\x12C', '\x12D', '\x5', ':', '\x1E', 
		'\x2', '\x12D', '\x12E', '\a', '\x35', '\x2', '\x2', '\x12E', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x125', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x131', '\x138', '\x5', '\x36', '\x1C', 
		'\x2', '\x132', '\x133', '\x5', '\x36', '\x1C', '\x2', '\x133', '\x134', 
		'\t', '\b', '\x2', '\x2', '\x134', '\x135', '\x5', '\x38', '\x1D', '\x2', 
		'\x135', '\x136', '\b', '\x1D', '\x1', '\x2', '\x136', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x131', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x138', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x140', '\x5', '\x38', '\x1D', '\x2', '\x13A', '\x13B', 
		'\x5', '@', '!', '\x2', '\x13B', '\x13C', '\a', '\x1B', '\x2', '\x2', 
		'\x13C', '\x13D', '\x5', ':', '\x1E', '\x2', '\x13D', '\x13E', '\b', '\x1E', 
		'\x1', '\x2', '\x13E', '\x140', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x13F', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x140', ';', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\a', '\b', 
		'\x2', '\x2', '\x142', '\x143', '\x5', '>', ' ', '\x2', '\x143', '\x146', 
		'\b', '\x1F', '\x1', '\x2', '\x144', '\x145', '\a', '\x1B', '\x2', '\x2', 
		'\x145', '\x147', '\x5', '\x34', '\x1B', '\x2', '\x146', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x148', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\b', '\x1F', '\x1', 
		'\x2', '\x149', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', 
		'\a', '\t', '\x2', '\x2', '\x14B', '\x14C', '\x5', '>', ' ', '\x2', '\x14C', 
		'\x14F', '\b', '\x1F', '\x1', '\x2', '\x14D', '\x14E', '\a', '\x1B', '\x2', 
		'\x2', '\x14E', '\x150', '\x5', '\x34', '\x1B', '\x2', '\x14F', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\b', 
		'\x1F', '\x1', '\x2', '\x152', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x153', 
		'\x154', '\a', '\n', '\x2', '\x2', '\x154', '\x155', '\x5', '@', '!', 
		'\x2', '\x155', '\x158', '\b', '\x1F', '\x1', '\x2', '\x156', '\x157', 
		'\a', '\x1B', '\x2', '\x2', '\x157', '\x159', '\x5', ':', '\x1E', '\x2', 
		'\x158', '\x156', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x15B', '\b', '\x1F', '\x1', '\x2', '\x15B', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x141', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '=', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\a', '\x38', 
		'\x2', '\x2', '\x15F', '\x160', '\b', ' ', '\x1', '\x2', '\x160', '?', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\a', '\x38', '\x2', '\x2', 
		'\x162', '\x163', '\b', '!', '\x1', '\x2', '\x163', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x164', '\x165', '\t', '\t', '\x2', '\x2', '\x165', '\x166', 
		'\a', '\x34', '\x2', '\x2', '\x166', '\x167', '\x5', '\x34', '\x1B', '\x2', 
		'\x167', '\x168', '\a', '\x35', '\x2', '\x2', '\x168', '\x169', '\b', 
		'\"', '\x1', '\x2', '\x169', '\x43', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x16B', '\a', '\x16', '\x2', '\x2', '\x16B', '\x16C', '\a', '\x34', '\x2', 
		'\x2', '\x16C', '\x16D', '\x5', '\x34', '\x1B', '\x2', '\x16D', '\x16E', 
		'\a', '\x31', '\x2', '\x2', '\x16E', '\x16F', '\x5', '\x34', '\x1B', '\x2', 
		'\x16F', '\x170', '\a', '\x35', '\x2', '\x2', '\x170', '\x171', '\b', 
		'#', '\x1', '\x2', '\x171', '\x45', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x173', '\a', '\x10', '\x2', '\x2', '\x173', '\x174', '\a', '\x34', '\x2', 
		'\x2', '\x174', '\x175', '\x5', '\x34', '\x1B', '\x2', '\x175', '\x176', 
		'\a', '\x35', '\x2', '\x2', '\x176', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x178', '\a', '\x11', '\x2', '\x2', '\x178', '\x179', '\a', 
		'\x34', '\x2', '\x2', '\x179', '\x17A', '\x5', '\x34', '\x1B', '\x2', 
		'\x17A', '\x17B', '\a', '\x35', '\x2', '\x2', '\x17B', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x17C', '\x17D', '\a', '\x12', '\x2', '\x2', '\x17D', '\x17E', 
		'\a', '\x34', '\x2', '\x2', '\x17E', '\x17F', '\x5', '\x34', '\x1B', '\x2', 
		'\x17F', '\x180', '\a', '\x35', '\x2', '\x2', '\x180', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x181', '\x182', '\a', '\x13', '\x2', '\x2', '\x182', '\x183', 
		'\a', '\x34', '\x2', '\x2', '\x183', '\x184', '\x5', '\x34', '\x1B', '\x2', 
		'\x184', '\x185', '\a', '\x35', '\x2', '\x2', '\x185', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x186', '\x187', '\a', '\x14', '\x2', '\x2', '\x187', '\x188', 
		'\a', '\x34', '\x2', '\x2', '\x188', '\x189', '\x5', '\x34', '\x1B', '\x2', 
		'\x189', '\x18A', '\a', '\x35', '\x2', '\x2', '\x18A', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x18B', '\x18C', '\a', '\x15', '\x2', '\x2', '\x18C', '\x18D', 
		'\a', '\x34', '\x2', '\x2', '\x18D', '\x18E', '\x5', '\x34', '\x1B', '\x2', 
		'\x18E', '\x18F', '\a', '\x35', '\x2', '\x2', '\x18F', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x190', '\x191', '\a', '\x16', '\x2', '\x2', '\x191', '\x192', 
		'\a', '\x34', '\x2', '\x2', '\x192', '\x193', '\x5', '\x34', '\x1B', '\x2', 
		'\x193', '\x194', '\a', '\x31', '\x2', '\x2', '\x194', '\x195', '\x5', 
		'\x34', '\x1B', '\x2', '\x195', '\x196', '\a', '\x35', '\x2', '\x2', '\x196', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\a', '\xE', '\x2', 
		'\x2', '\x198', '\x199', '\a', '\x34', '\x2', '\x2', '\x199', '\x19A', 
		'\x5', ':', '\x1E', '\x2', '\x19A', '\x19B', '\a', '\x35', '\x2', '\x2', 
		'\x19B', '\x19D', '\a', '\x32', '\x2', '\x2', '\x19C', '\x19E', '\x5', 
		'\x16', '\f', '\x2', '\x19D', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19E', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\a', '\x33', '\x2', '\x2', 
		'\x1A2', '\x1A3', '\a', '\xF', '\x2', '\x2', '\x1A3', '\x1A5', '\a', '\x32', 
		'\x2', '\x2', '\x1A4', '\x1A6', '\x5', '\x16', '\f', '\x2', '\x1A5', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A9', 
		'\x1AA', '\a', '\x33', '\x2', '\x2', '\x1AA', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x1AB', '\x1AC', '\a', '\xE', '\x2', '\x2', '\x1AC', '\x1AD', 
		'\a', '\x34', '\x2', '\x2', '\x1AD', '\x1AE', '\x5', ':', '\x1E', '\x2', 
		'\x1AE', '\x1AF', '\a', '\x35', '\x2', '\x2', '\x1AF', '\x1B1', '\a', 
		'\x32', '\x2', '\x2', '\x1B0', '\x1B2', '\x5', '\x16', '\f', '\x2', '\x1B1', 
		'\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\x3', '\x2', '\x2', 
		'\x2', '\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B6', '\a', '\x33', '\x2', '\x2', '\x1B6', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x1B7', '\x1B8', '\a', '\v', '\x2', '\x2', '\x1B8', '\x1B9', 
		'\a', '\x34', '\x2', '\x2', '\x1B9', '\x1BA', '\x5', ':', '\x1E', '\x2', 
		'\x1BA', '\x1BB', '\a', '\x35', '\x2', '\x2', '\x1BB', '\x1BD', '\a', 
		'\x32', '\x2', '\x2', '\x1BC', '\x1BE', '\x5', '\x16', '\f', '\x2', '\x1BD', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', 
		'\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x1C1', '\x1C2', '\a', '\x33', '\x2', '\x2', '\x1C2', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x1C3', '\x1C4', '\a', '\r', '\x2', '\x2', '\x1C4', '\x1C6', 
		'\a', '\x32', '\x2', '\x2', '\x1C5', '\x1C7', '\x5', '\x16', '\f', '\x2', 
		'\x1C6', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C8', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', 
		'\x2', '\x1CA', '\x1CB', '\a', '\x33', '\x2', '\x2', '\x1CB', '\x1CC', 
		'\a', '\v', '\x2', '\x2', '\x1CC', '\x1CD', '\a', '\x34', '\x2', '\x2', 
		'\x1CD', '\x1CE', '\x5', ':', '\x1E', '\x2', '\x1CE', '\x1CF', '\a', '\x35', 
		'\x2', '\x2', '\x1CF', '[', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', 
		'\a', '\f', '\x2', '\x2', '\x1D1', '\x1D3', '\a', '\x34', '\x2', '\x2', 
		'\x1D2', '\x1D4', '\n', '\n', '\x2', '\x2', '\x1D3', '\x1D2', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\a', 
		'\a', '\x2', '\x2', '\x1D8', '\x1D9', '\x5', ':', '\x1E', '\x2', '\x1D9', 
		'\x1DB', '\a', '\a', '\x2', '\x2', '\x1DA', '\x1DC', '\n', '\n', '\x2', 
		'\x2', '\x1DB', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\x1DD', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\x3', 
		'\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\a', '\x35', '\x2', '\x2', '\x1E0', 
		'\x1E2', '\a', '\x32', '\x2', '\x2', '\x1E1', '\x1E3', '\x5', '\x16', 
		'\f', '\x2', '\x1E2', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\a', '\x33', '\x2', '\x2', '\x1E7', 
		']', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\t', '\v', '\x2', 
		'\x2', '\x1E9', '_', '\x3', '\x2', '\x2', '\x2', '!', '\x63', 'j', '~', 
		'\x9F', '\xA5', '\xB2', '\xBD', '\xC0', '\xD0', '\xE6', '\xE9', '\xF1', 
		'\x101', '\x109', '\x114', '\x121', '\x12F', '\x137', '\x13F', '\x146', 
		'\x14F', '\x158', '\x15C', '\x19F', '\x1A7', '\x1B3', '\x1BF', '\x1C8', 
		'\x1D5', '\x1DD', '\x1E4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
