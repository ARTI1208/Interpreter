//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ninja.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class NinjaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FUN_KEYWORD=1, MEANINGFUL_TYPE=2, VOID=3, COMMA=4, OBRACE=5, CBRACE=6, 
		OBRACKET=7, CBRACKET=8, WS=9, INT=10, WORD=11, DOUBLE=12, CALL=13;
	public const int
		RULE_program = 0, RULE_fun = 1, RULE_signature = 2, RULE_code = 3, RULE_params = 4, 
		RULE_param = 5;
	public static readonly string[] ruleNames = {
		"program", "fun", "signature", "code", "params", "param"
	};

	private static readonly string[] _LiteralNames = {
		null, "'fun'", null, "'void'", "','", "'{'", "'}'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUN_KEYWORD", "MEANINGFUL_TYPE", "VOID", "COMMA", "OBRACE", "CBRACE", 
		"OBRACKET", "CBRACKET", "WS", "INT", "WORD", "DOUBLE", "CALL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ninja.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static NinjaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NinjaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NinjaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public FunContext fun() {
			return GetRuleContext<FunContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; fun();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunContext : ParserRuleContext {
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public FunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fun; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterFun(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitFun(this);
		}
	}

	[RuleVersion(0)]
	public FunContext fun() {
		FunContext _localctx = new FunContext(Context, State);
		EnterRule(_localctx, 2, RULE_fun);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; signature();
			State = 15; Match(OBRACE);
			State = 16; code();
			State = 17; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : ParserRuleContext {
		public ITerminalNode FUN_KEYWORD() { return GetToken(NinjaParser.FUN_KEYWORD, 0); }
		public ITerminalNode WORD() { return GetToken(NinjaParser.WORD, 0); }
		public ITerminalNode OBRACKET() { return GetToken(NinjaParser.OBRACKET, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode CBRACKET() { return GetToken(NinjaParser.CBRACKET, 0); }
		public ITerminalNode MEANINGFUL_TYPE() { return GetToken(NinjaParser.MEANINGFUL_TYPE, 0); }
		public ITerminalNode VOID() { return GetToken(NinjaParser.VOID, 0); }
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19; Match(FUN_KEYWORD);
			State = 20;
			_la = TokenStream.LA(1);
			if ( !(_la==MEANINGFUL_TYPE || _la==VOID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 21; Match(WORD);
			State = 22; Match(OBRACKET);
			State = 23; @params();
			State = 24; Match(CBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public ITerminalNode[] CALL() { return GetTokens(NinjaParser.CALL); }
		public ITerminalNode CALL(int i) {
			return GetToken(NinjaParser.CALL, i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 6, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CALL) {
				{
				{
				State = 26; Match(CALL);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NinjaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NinjaParser.COMMA, i);
		}
		public ParamsContext[] @params() {
			return GetRuleContexts<ParamsContext>();
		}
		public ParamsContext @params(int i) {
			return GetRuleContext<ParamsContext>(i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 8, RULE_params);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MEANINGFUL_TYPE) {
				{
				State = 32; param();
				}
			}

			State = 39;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 35; Match(COMMA);
					State = 36; @params();
					}
					} 
				}
				State = 41;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public ITerminalNode MEANINGFUL_TYPE() { return GetToken(NinjaParser.MEANINGFUL_TYPE, 0); }
		public ITerminalNode WORD() { return GetToken(NinjaParser.WORD, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 10, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(MEANINGFUL_TYPE);
			State = 43; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '\x30', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\a', '\x5', '\x1E', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '!', '\v', '\x5', '\x3', '\x6', '\x5', '\x6', 
		'$', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '(', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '+', '\v', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x2', '\x2', '\b', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\x2', '\x3', '\x3', '\x2', '\x4', '\x5', '\x2', ',', 
		'\x2', '\xE', '\x3', '\x2', '\x2', '\x2', '\x4', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x15', '\x3', '\x2', '\x2', '\x2', '\b', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\n', '#', '\x3', '\x2', '\x2', '\x2', '\f', 
		',', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x5', '\x4', '\x3', '\x2', 
		'\xF', '\x3', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\x5', '\x6', 
		'\x4', '\x2', '\x11', '\x12', '\a', '\a', '\x2', '\x2', '\x12', '\x13', 
		'\x5', '\b', '\x5', '\x2', '\x13', '\x14', '\a', '\b', '\x2', '\x2', '\x14', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\a', '\x3', '\x2', 
		'\x2', '\x16', '\x17', '\t', '\x2', '\x2', '\x2', '\x17', '\x18', '\a', 
		'\r', '\x2', '\x2', '\x18', '\x19', '\a', '\t', '\x2', '\x2', '\x19', 
		'\x1A', '\x5', '\n', '\x6', '\x2', '\x1A', '\x1B', '\a', '\n', '\x2', 
		'\x2', '\x1B', '\a', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\a', 
		'\xF', '\x2', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\t', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '$', '\x5', 
		'\f', '\a', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', 
		'\x2', '\x2', '\x2', '$', ')', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', 
		'\x6', '\x2', '\x2', '&', '(', '\x5', '\n', '\x6', '\x2', '\'', '%', '\x3', 
		'\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', '\'', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', 
		'\v', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\a', '\x4', '\x2', '\x2', '-', '.', '\a', '\r', '\x2', '\x2', 
		'.', '\r', '\x3', '\x2', '\x2', '\x2', '\x5', '\x1F', '#', ')',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
