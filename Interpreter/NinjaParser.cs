//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\..\..\Interpreter\Ninja.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class NinjaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, RETURN_KEYWORD=5, MAIN=6, FUN_KEYWORD=7, 
		MEANINGFUL_TYPE=8, VOID=9, COMMA=10, OBRACE=11, CBRACE=12, OBRACKET=13, 
		CBRACKET=14, WS=15, COMMENT=16, BOOL=17, DOUBLE=18, INT=19, WORD=20, STRING=21;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_main_signature = 2, RULE_function = 3, 
		RULE_v_function = 4, RULE_v_fun_signature = 5, RULE_m_function = 6, RULE_m_fun_signature = 7, 
		RULE_code = 8, RULE_main_code = 9, RULE_method_return = 10, RULE_params = 11, 
		RULE_var_signature = 12, RULE_builtin_func_p = 13, RULE_builtin_func_e = 14, 
		RULE_call = 15, RULE_parameterized_call = 16, RULE_simple_call = 17, RULE_custom_call = 18, 
		RULE_call_params = 19, RULE_val_or_id = 20;
	public static readonly string[] ruleNames = {
		"program", "main", "main_signature", "function", "v_function", "v_fun_signature", 
		"m_function", "m_fun_signature", "code", "main_code", "method_return", 
		"params", "var_signature", "builtin_func_p", "builtin_func_e", "call", 
		"parameterized_call", "simple_call", "custom_call", "call_params", "val_or_id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'move'", "'turn'", "'hit'", "'shoot'", "'return'", "'main'", "'fun'", 
		null, "'void'", "','", "'{'", "'}'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "RETURN_KEYWORD", "MAIN", "FUN_KEYWORD", 
		"MEANINGFUL_TYPE", "VOID", "COMMA", "OBRACE", "CBRACE", "OBRACKET", "CBRACKET", 
		"WS", "COMMENT", "BOOL", "DOUBLE", "INT", "WORD", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ninja.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static NinjaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		public enum ParamType
		{
			Receive, Pass
		};

		public enum CallType
		{
			BuiltIn, Custom
		};
		
		public enum VarType
	    {
	    	Int, Double, Bool
	    };
	    
	    public enum ReturnType
	    {
	    	Int, Double, Bool, Void
	    };
		
		public class CallData
		{
			public string name;
	            
			public dynamic value;
	            
			public CallType callType;
	    	
			public ReturnType returnType;
	    		
			public ArrayList<NinjaParser.ParamData> paramList = new ArrayList<NinjaParser.ParamData>();	
	    	
	    	public override string ToString()
	        {
				return $"call {name} of type {callType} returns {returnType}, params : {paramList}";
			}
		}

		public class ParamData
		{
			
	        public string name;
	        
	        public dynamic value;
		
			public VarType type;	
			
			public ParamType paramType = ParamType.Receive;	
		
			public override string ToString()
	        {
	            return $"param {type} {name}";
	        }
		}
		
		
	    public class VarData
	    {
	        public VarType type;
	        public dynamic value;
	        public string name;
	    }

	    public class MethodData
	    {
	        public string name;
			public bool isMeaningful;
	        public ReturnType returnType;
	        public ArrayList<NinjaParser.ParamData> paramList = new ArrayList<NinjaParser.ParamData>();
	        public List<CallData> callList = new ArrayList<CallData>();
	        
			public dynamic returnValue;
	        
	        public override string ToString()
	        {
	        	return $"fun {returnType} {name}, params : {paramList} ";
	        }
	        public Dictionary<string, VarData> varTable = new Dictionary<string, VarData>();
	    }
	 
	    public static Dictionary<string, MethodData> metTable = new Dictionary<string, MethodData>();
	    
	    public bool CheckParams(NinjaParser.CallData call, NinjaParser.MethodData method)
	    		{
	    			if (call.paramList.Count != method.paramList.Count)
	    			{
	    				Console.WriteLine($"Expected params {method.paramList.Count}, found {call.paramList.Count}");
	    				return false;
	    			}
	    
	    			for (int i = 0; i < call.paramList.Count; i++)
	    			{
	    				
	    				if (call.paramList[i].type == method.paramList[i].type)
	    				{
	    					method.paramList[i].value = call.paramList[i].value;
	    				}
	    				else
	    				{
	    					Console.WriteLine($"Type mismatch: expected {method.paramList[i].type}, found {call.paramList[i].type} with value {call.paramList[i].value}");
	    					return false;
	    				}
	    			}
	    
	    			return true;
	    		}
	    		
	    		int depth = 0;
	    		
	    		public void GoThroughCalls(NinjaParser.MethodData methodData)
	            		{
	            			string formatter = new string('\t', depth);
	            			Console.WriteLine($"{formatter}--Entering method {methodData.name}, params {ParamListToString(methodData.paramList)}:");
	            			foreach (var call in methodData.callList)
	            			{
	            				if (call.callType == NinjaParser.CallType.Custom)
	            				{
	            					if (NinjaParser.metTable.ContainsKey(call.name))
	            					{
	            						++depth;
	            						GoThroughCalls(NinjaParser.metTable[call.name]);
	            					}
	            				}
	            				else
	            				{
	            					Console.WriteLine($"{formatter}Calling builtin method {call.name} with params {ParamListToString(call.paramList)}");
	            //					Console.WriteLine(call.name);
	            					switch (call.name)
	            					{
	            						case "move":
	            //							Console.WriteLine($"move byte");
	            							_bytes.Add(1);
	            							break;
	            						case "turn":
	            //							Console.WriteLine("turn byte");
	            							_bytes.Add(2);
	            							break;
	            						case "hit":
	            //							Console.WriteLine($"hit byte");
	            							_bytes.Add(3);
	            							break;
	            						case "shoot":
	            //							Console.WriteLine($"shoot byte");
	            							_bytes.Add(4);
	            							break;
	            						default:
	            							Console.WriteLine($"no byte for this op {call.name}");
	            							break;
	            					}
	            				}
	            			}
	            
	            			if (methodData.isMeaningful)
	            			{
	            				Console.WriteLine($"{formatter}Returning {methodData.returnValue} of type {methodData.returnType}");
	            			}
	            			--depth;
	            			Console.WriteLine($"{formatter}--Exiting method {methodData.name}");
	            		}
	            		
		ArrayList<byte> _bytes = new ArrayList<byte>();
		
		string ParamListToString(ArrayList<NinjaParser.ParamData> list)
	    		{
	    			string s = "{";
	    			foreach (var data in list)
	    			{
	    				if (data.paramType == NinjaParser.ParamType.Pass)
	    				{
	    					s += $" {data.type} {data.value},";	
	    				}
	    				else
	    				{
	    					s += $" {data.type} {data.name} = {data.value},";	
	    				}
	    			}
	    
	    			s = (s.Length > 1 ? s.Substring(0, s.Length - 1) : s) + " }";
	    			return s;
	    		}            		

		public NinjaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NinjaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 42; function();
					}
					} 
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 48; main();
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FUN_KEYWORD) {
				{
				{
				State = 49; function();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}


			GoThroughCalls(NinjaParser.metTable["main"]);


			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public Main_signatureContext main_signature() {
			return GetRuleContext<Main_signatureContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public Main_codeContext main_code() {
			return GetRuleContext<Main_codeContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; main_signature();
			State = 58; Match(OBRACE);
			State = 59; main_code();
			State = 60; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_signatureContext : ParserRuleContext {
		public ITerminalNode FUN_KEYWORD() { return GetToken(NinjaParser.FUN_KEYWORD, 0); }
		public ITerminalNode VOID() { return GetToken(NinjaParser.VOID, 0); }
		public ITerminalNode MAIN() { return GetToken(NinjaParser.MAIN, 0); }
		public ITerminalNode OBRACKET() { return GetToken(NinjaParser.OBRACKET, 0); }
		public ITerminalNode CBRACKET() { return GetToken(NinjaParser.CBRACKET, 0); }
		public Main_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMain_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMain_signature(this);
		}
	}

	[RuleVersion(0)]
	public Main_signatureContext main_signature() {
		Main_signatureContext _localctx = new Main_signatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_main_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(FUN_KEYWORD);
			State = 63; Match(VOID);
			State = 64; Match(MAIN);
			State = 65; Match(OBRACKET);
			State = 66; Match(CBRACKET);

				MethodData newMet = new MethodData
				{
					name = "main",
					returnType = ReturnType.Void
				};
				metTable.Add("main", newMet);

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public V_functionContext v_function() {
			return GetRuleContext<V_functionContext>(0);
		}
		public M_functionContext m_function() {
			return GetRuleContext<M_functionContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; v_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; m_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class V_functionContext : ParserRuleContext {
		public V_fun_signatureContext v_fun_signature() {
			return GetRuleContext<V_fun_signatureContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public V_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_v_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterV_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitV_function(this);
		}
	}

	[RuleVersion(0)]
	public V_functionContext v_function() {
		V_functionContext _localctx = new V_functionContext(Context, State);
		EnterRule(_localctx, 8, RULE_v_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; v_fun_signature();
			State = 74; Match(OBRACE);
			State = 75; code();
			State = 76; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class V_fun_signatureContext : ParserRuleContext {
		public IToken _WORD;
		public ITerminalNode FUN_KEYWORD() { return GetToken(NinjaParser.FUN_KEYWORD, 0); }
		public ITerminalNode VOID() { return GetToken(NinjaParser.VOID, 0); }
		public ITerminalNode WORD() { return GetToken(NinjaParser.WORD, 0); }
		public ITerminalNode OBRACKET() { return GetToken(NinjaParser.OBRACKET, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode CBRACKET() { return GetToken(NinjaParser.CBRACKET, 0); }
		public V_fun_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_v_fun_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterV_fun_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitV_fun_signature(this);
		}
	}

	[RuleVersion(0)]
	public V_fun_signatureContext v_fun_signature() {
		V_fun_signatureContext _localctx = new V_fun_signatureContext(Context, State);
		EnterRule(_localctx, 10, RULE_v_fun_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(FUN_KEYWORD);
			State = 79; Match(VOID);
			State = 80; _localctx._WORD = Match(WORD);
			State = 81; Match(OBRACKET);
			State = 82; @params();
			State = 83; Match(CBRACKET);


				string methodName = (_localctx._WORD!=null?_localctx._WORD.Text:null);
				if (methodName == "main" || metTable.ContainsKey(methodName))
					throw new NotImplementedException("!!!Method overloading is not supported yet!!!");

				MethodData newMet = new MethodData
				{
					name = methodName,
					returnType = ReturnType.Void
				};
				
				foreach (var sig in _localctx.@params().var_signature())
			    {
			    	var d = new NinjaParser.ParamData()
			    	{
			    		name = sig.WORD().Symbol.Text
			    	};
			    	switch (sig.MEANINGFUL_TYPE().Symbol.Text)
			    	{
			    		case "int":
			    			d.type = NinjaParser.VarType.Int;
			    			break;
			    		case "double":
			    			d.type = NinjaParser.VarType.Double;
			    			break;
			    		case "bool":
			    			d.type = NinjaParser.VarType.Bool;
			    			break;
			    		default:
			    			throw new NotImplementedException();
			    	}
			    				
			    	newMet.paramList.Add(d);
			    			
			    }
				metTable.Add(newMet.name, newMet);

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class M_functionContext : ParserRuleContext {
		public Method_returnContext _method_return;
		public M_fun_signatureContext m_fun_signature() {
			return GetRuleContext<M_fun_signatureContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public Method_returnContext method_return() {
			return GetRuleContext<Method_returnContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public M_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterM_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitM_function(this);
		}
	}

	[RuleVersion(0)]
	public M_functionContext m_function() {
		M_functionContext _localctx = new M_functionContext(Context, State);
		EnterRule(_localctx, 12, RULE_m_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; m_fun_signature();
			State = 87; Match(OBRACE);
			State = 88; code();
			State = 89; _localctx._method_return = method_return();
			State = 90; Match(CBRACE);


				string methodName = _localctx.m_fun_signature().WORD().Symbol.Text;
				
				ReturnType actualReturn;
				
				switch(_localctx._method_return.type)
			    {
			        case "int":
			        	actualReturn = ReturnType.Int;
			        	break;
			        case "double":
			            actualReturn = ReturnType.Double;
			            break;
			        case "bool":
			            actualReturn = ReturnType.Bool;
			            break;		
			        default:
			    		throw new NotImplementedException();     
			    }

				if (actualReturn != metTable[methodName].returnType){
					throw new Exception($"Actual return is {actualReturn}, expected declared return type {metTable[methodName].returnType}");
				}

				metTable[methodName].returnValue = _localctx._method_return.value;


			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class M_fun_signatureContext : ParserRuleContext {
		public IToken _MEANINGFUL_TYPE;
		public IToken _WORD;
		public ITerminalNode FUN_KEYWORD() { return GetToken(NinjaParser.FUN_KEYWORD, 0); }
		public ITerminalNode MEANINGFUL_TYPE() { return GetToken(NinjaParser.MEANINGFUL_TYPE, 0); }
		public ITerminalNode WORD() { return GetToken(NinjaParser.WORD, 0); }
		public ITerminalNode OBRACKET() { return GetToken(NinjaParser.OBRACKET, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode CBRACKET() { return GetToken(NinjaParser.CBRACKET, 0); }
		public M_fun_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m_fun_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterM_fun_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitM_fun_signature(this);
		}
	}

	[RuleVersion(0)]
	public M_fun_signatureContext m_fun_signature() {
		M_fun_signatureContext _localctx = new M_fun_signatureContext(Context, State);
		EnterRule(_localctx, 14, RULE_m_fun_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(FUN_KEYWORD);
			State = 94; _localctx._MEANINGFUL_TYPE = Match(MEANINGFUL_TYPE);
			State = 95; _localctx._WORD = Match(WORD);
			State = 96; Match(OBRACKET);
			State = 97; @params();
			State = 98; Match(CBRACKET);

				string methodName = (_localctx._WORD!=null?_localctx._WORD.Text:null);
				if (methodName == "main" || metTable.ContainsKey(methodName))
					throw new NotImplementedException("!!!Method overloading is not supported yet!!!");

				MethodData newMet = new MethodData
				{
					name = methodName,
					isMeaningful = true
				};
				
				switch((_localctx._MEANINGFUL_TYPE!=null?_localctx._MEANINGFUL_TYPE.Text:null))
			    {
			    	case "int":
			    		newMet.returnType = ReturnType.Int;
			    		break;
			    	case "double":
			            newMet.returnType = ReturnType.Double;
			           	break;
			        case "bool":
			            newMet.returnType = ReturnType.Bool;
			            break;		
			    }
			    
				foreach (var sig in _localctx.@params().var_signature())
			    {
			    	var d = new NinjaParser.ParamData()
			    	{
			    		name = sig.WORD().Symbol.Text
			    	};
			    	switch (sig.MEANINGFUL_TYPE().Symbol.Text)
			    	{
			    		case "int":
			    			d.type = NinjaParser.VarType.Int;
			    			break;
			    		case "double":
			    			d.type = NinjaParser.VarType.Double;
			    			break;
			    		case "bool":
			    			d.type = NinjaParser.VarType.Bool;
			    			break;
			    		default:
			    			throw new NotImplementedException();
			    	}
			    				
			    	newMet.paramList.Add(d);
			    			
			    }

				metTable.Add(newMet.name, newMet);

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public Custom_callContext[] custom_call() {
			return GetRuleContexts<Custom_callContext>();
		}
		public Custom_callContext custom_call(int i) {
			return GetRuleContext<Custom_callContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 16, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << WORD))) != 0)) {
				{
				State = 103;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__2:
				case T__3:
					{
					State = 101; call();
					}
					break;
				case WORD:
					{
					State = 102; custom_call();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_codeContext : ParserRuleContext {
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public Custom_callContext[] custom_call() {
			return GetRuleContexts<Custom_callContext>();
		}
		public Custom_callContext custom_call(int i) {
			return GetRuleContext<Custom_callContext>(i);
		}
		public Main_codeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMain_code(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMain_code(this);
		}
	}

	[RuleVersion(0)]
	public Main_codeContext main_code() {
		Main_codeContext _localctx = new Main_codeContext(Context, State);
		EnterRule(_localctx, 18, RULE_main_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << WORD))) != 0)) {
				{
				State = 110;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__2:
				case T__3:
					{
					State = 108; call();
					}
					break;
				case WORD:
					{
					State = 109; custom_call();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_returnContext : ParserRuleContext {
		public string type;
		public dynamic value;
		public Val_or_idContext _val_or_id;
		public ITerminalNode RETURN_KEYWORD() { return GetToken(NinjaParser.RETURN_KEYWORD, 0); }
		public Val_or_idContext val_or_id() {
			return GetRuleContext<Val_or_idContext>(0);
		}
		public Method_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMethod_return(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMethod_return(this);
		}
	}

	[RuleVersion(0)]
	public Method_returnContext method_return() {
		Method_returnContext _localctx = new Method_returnContext(Context, State);
		EnterRule(_localctx, 20, RULE_method_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(RETURN_KEYWORD);
			State = 116; _localctx._val_or_id = val_or_id();

				_localctx.type =  _localctx._val_or_id.type;
				_localctx.value =  _localctx._val_or_id.value;

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public Var_signatureContext[] var_signature() {
			return GetRuleContexts<Var_signatureContext>();
		}
		public Var_signatureContext var_signature(int i) {
			return GetRuleContext<Var_signatureContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NinjaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NinjaParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 22, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MEANINGFUL_TYPE) {
				{
				State = 119; var_signature();
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 120; Match(COMMA);
					State = 121; var_signature();
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_signatureContext : ParserRuleContext {
		public ITerminalNode MEANINGFUL_TYPE() { return GetToken(NinjaParser.MEANINGFUL_TYPE, 0); }
		public ITerminalNode WORD() { return GetToken(NinjaParser.WORD, 0); }
		public Var_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterVar_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitVar_signature(this);
		}
	}

	[RuleVersion(0)]
	public Var_signatureContext var_signature() {
		Var_signatureContext _localctx = new Var_signatureContext(Context, State);
		EnterRule(_localctx, 24, RULE_var_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(MEANINGFUL_TYPE);
			State = 130; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_func_pContext : ParserRuleContext {
		public Builtin_func_pContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_func_p; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBuiltin_func_p(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBuiltin_func_p(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_func_pContext builtin_func_p() {
		Builtin_func_pContext _localctx = new Builtin_func_pContext(Context, State);
		EnterRule(_localctx, 26, RULE_builtin_func_p);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_func_eContext : ParserRuleContext {
		public Builtin_func_eContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_func_e; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBuiltin_func_e(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBuiltin_func_e(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_func_eContext builtin_func_e() {
		Builtin_func_eContext _localctx = new Builtin_func_eContext(Context, State);
		EnterRule(_localctx, 28, RULE_builtin_func_e);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public Parameterized_callContext _parameterized_call;
		public Simple_callContext _simple_call;
		public Parameterized_callContext parameterized_call() {
			return GetRuleContext<Parameterized_callContext>(0);
		}
		public Simple_callContext simple_call() {
			return GetRuleContext<Simple_callContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 30, RULE_call);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; _localctx._parameterized_call = parameterized_call();


					CallData data = new CallData(){
						callType = CallType.BuiltIn, 
						name = (_localctx._parameterized_call!=null?TokenStream.GetText(_localctx._parameterized_call.Start,_localctx._parameterized_call.Stop):null).Substring(0, (_localctx._parameterized_call!=null?TokenStream.GetText(_localctx._parameterized_call.Start,_localctx._parameterized_call.Stop):null).IndexOf("(")),
						returnType = ReturnType.Void
					};
					ParamData d = new ParamData()
					{
						type = VarType.Double, 
						value = _localctx._parameterized_call.DOUBLE().GetText()
					};
				    d.paramType = ParamType.Pass;				
				    data.paramList.Add(d);
					
					string methodName = "";
					if (_localctx.Parent.Parent is V_functionContext parentContext)
					{
						methodName = parentContext.v_fun_signature().WORD().Symbol.Text;
					}		
					if (_localctx.Parent.Parent is M_functionContext parContext)
					{
						methodName = parContext.m_fun_signature().WORD().Symbol.Text;
					}
					if (_localctx.Parent.Parent is MainContext)
					{
						methodName = "main";
					}	

					if(methodName != ""){
						metTable[methodName].callList.Add(data);
					}


				}
				break;
			case T__2:
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; _localctx._simple_call = simple_call();


					CallData data = new CallData(){
						callType = CallType.BuiltIn, 
						name = (_localctx._simple_call!=null?TokenStream.GetText(_localctx._simple_call.Start,_localctx._simple_call.Stop):null).Substring(0, (_localctx._simple_call!=null?TokenStream.GetText(_localctx._simple_call.Start,_localctx._simple_call.Stop):null).IndexOf("(")),
						returnType = ReturnType.Void
					};

					string methodName = "";
					if (_localctx.Parent.Parent is V_functionContext parentContext)
					{
						methodName = parentContext.v_fun_signature().WORD().Symbol.Text;
					}		
					if (_localctx.Parent.Parent is M_functionContext parContext)
					{
						methodName = parContext.m_fun_signature().WORD().Symbol.Text;
					}
					if (_localctx.Parent.Parent is MainContext)
					{
						methodName = "main";
					}	

					if(methodName != ""){
						metTable[methodName].callList.Add(data);
					}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterized_callContext : ParserRuleContext {
		public Builtin_func_pContext builtin_func_p() {
			return GetRuleContext<Builtin_func_pContext>(0);
		}
		public ITerminalNode OBRACKET() { return GetToken(NinjaParser.OBRACKET, 0); }
		public ITerminalNode DOUBLE() { return GetToken(NinjaParser.DOUBLE, 0); }
		public ITerminalNode CBRACKET() { return GetToken(NinjaParser.CBRACKET, 0); }
		public Parameterized_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterized_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterParameterized_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitParameterized_call(this);
		}
	}

	[RuleVersion(0)]
	public Parameterized_callContext parameterized_call() {
		Parameterized_callContext _localctx = new Parameterized_callContext(Context, State);
		EnterRule(_localctx, 32, RULE_parameterized_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; builtin_func_p();
			State = 145; Match(OBRACKET);
			State = 146; Match(DOUBLE);
			State = 147; Match(CBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_callContext : ParserRuleContext {
		public Builtin_func_eContext builtin_func_e() {
			return GetRuleContext<Builtin_func_eContext>(0);
		}
		public ITerminalNode OBRACKET() { return GetToken(NinjaParser.OBRACKET, 0); }
		public ITerminalNode CBRACKET() { return GetToken(NinjaParser.CBRACKET, 0); }
		public Simple_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterSimple_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitSimple_call(this);
		}
	}

	[RuleVersion(0)]
	public Simple_callContext simple_call() {
		Simple_callContext _localctx = new Simple_callContext(Context, State);
		EnterRule(_localctx, 34, RULE_simple_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; builtin_func_e();
			State = 150; Match(OBRACKET);
			State = 151; Match(CBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Custom_callContext : ParserRuleContext {
		public IToken _WORD;
		public ITerminalNode WORD() { return GetToken(NinjaParser.WORD, 0); }
		public ITerminalNode OBRACKET() { return GetToken(NinjaParser.OBRACKET, 0); }
		public Call_paramsContext call_params() {
			return GetRuleContext<Call_paramsContext>(0);
		}
		public ITerminalNode CBRACKET() { return GetToken(NinjaParser.CBRACKET, 0); }
		public Custom_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_custom_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCustom_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCustom_call(this);
		}
	}

	[RuleVersion(0)]
	public Custom_callContext custom_call() {
		Custom_callContext _localctx = new Custom_callContext(Context, State);
		EnterRule(_localctx, 36, RULE_custom_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; _localctx._WORD = Match(WORD);
			State = 154; Match(OBRACKET);
			State = 155; call_params();
			State = 156; Match(CBRACKET);


				string callName = (_localctx._WORD!=null?_localctx._WORD.Text:null);

				CallData data = new CallData(){
					callType = CallType.Custom, 
					name = callName
				};

				foreach (var par in _localctx.call_params().val_or_id())
				{
				
					ParamData d = new ParamData();
					d.paramType = ParamType.Pass;
					switch (par.type)
			        {
			        	case "int":
			        		d.type = VarType.Int;		
			        		break;
			        	case "double":
			        		d.type = VarType.Double;
			        		break;
			        	case "bool":
			        		d.type = VarType.Bool;
			        		break;
			        	//case "other":
			        	//	break;
			        						
			        	default:
			        		throw new NotImplementedException();
			        }
			        d.value = par.value;
					data.paramList.Add(d);    			
				}
				
				string methodName = "";
			    if (_localctx.Parent.Parent is V_functionContext parentContext)
			    {
			    	methodName = parentContext.v_fun_signature().WORD().Symbol.Text;
			    }		
			    if (_localctx.Parent.Parent is M_functionContext parContext)
			   	{
			   		methodName = parContext.m_fun_signature().WORD().Symbol.Text;
			   	}
			   	if (_localctx.Parent.Parent is MainContext)
			   	{
			    	methodName = "main";
			    }	
			    Console.WriteLine($"call of {callName} in {methodName}, isKnownMet {metTable.ContainsKey(methodName)}");
			    Console.WriteLine($"Params pass result {CheckParams(data, metTable[callName])}");
			    
			    
			    if(methodName != ""){
			    	metTable[methodName].callList.Add(data);
			    }


			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_paramsContext : ParserRuleContext {
		public Val_or_idContext[] val_or_id() {
			return GetRuleContexts<Val_or_idContext>();
		}
		public Val_or_idContext val_or_id(int i) {
			return GetRuleContext<Val_or_idContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NinjaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NinjaParser.COMMA, i);
		}
		public Call_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCall_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCall_params(this);
		}
	}

	[RuleVersion(0)]
	public Call_paramsContext call_params() {
		Call_paramsContext _localctx = new Call_paramsContext(Context, State);
		EnterRule(_localctx, 38, RULE_call_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << WORD))) != 0)) {
				{
				State = 159; val_or_id();
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 160; Match(COMMA);
					State = 161; val_or_id();
					}
					}
					State = 166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Val_or_idContext : ParserRuleContext {
		public string type;
		public dynamic value;
		public IToken _INT;
		public IToken _DOUBLE;
		public IToken _BOOL;
		public IToken _WORD;
		public ITerminalNode INT() { return GetToken(NinjaParser.INT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(NinjaParser.DOUBLE, 0); }
		public ITerminalNode BOOL() { return GetToken(NinjaParser.BOOL, 0); }
		public ITerminalNode WORD() { return GetToken(NinjaParser.WORD, 0); }
		public Val_or_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val_or_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterVal_or_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitVal_or_id(this);
		}
	}

	[RuleVersion(0)]
	public Val_or_idContext val_or_id() {
		Val_or_idContext _localctx = new Val_or_idContext(Context, State);
		EnterRule(_localctx, 40, RULE_val_or_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				State = 169; _localctx._INT = Match(INT);


					_localctx.type =  "int";
					_localctx.value =  int.Parse((_localctx._INT!=null?_localctx._INT.Text:null));


				}
				break;
			case DOUBLE:
				{
				State = 171; _localctx._DOUBLE = Match(DOUBLE);

				        
				    _localctx.type =  "double";
				    try {
				     	_localctx.value =  double.Parse((_localctx._DOUBLE!=null?_localctx._DOUBLE.Text:null));
				    } catch {
				        _localctx.value =  double.Parse((_localctx._DOUBLE!=null?_localctx._DOUBLE.Text:null).Replace('.', ','));
				    }
				        

				}
				break;
			case BOOL:
				{
				State = 173; _localctx._BOOL = Match(BOOL);

				      
				   	_localctx.type =  "bool";
				    if((_localctx._BOOL!=null?_localctx._BOOL.Text:null) == "true")
				    	_localctx.value =  true;
				    else
				      	_localctx.value =  false;
				      

				}
				break;
			case WORD:
				{
				State = 175; _localctx._WORD = Match(WORD);

				      
				    _localctx.type =  "other";
				    _localctx.value =  (_localctx._WORD!=null?_localctx._WORD.Text:null);
				    

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x17', '\xB6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\a', '\x2', '.', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x31', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\x35', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x38', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'J', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', 'j', '\n', '\n', '\f', '\n', '\xE', '\n', 'm', 
		'\v', '\n', '\x3', '\v', '\x3', '\v', '\a', '\v', 'q', '\n', '\v', '\f', 
		'\v', '\xE', '\v', 't', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '}', '\n', 
		'\r', '\f', '\r', '\xE', '\r', '\x80', '\v', '\r', '\x5', '\r', '\x82', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x91', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\xA5', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xA8', '\v', '\x15', 
		'\x5', '\x15', '\xAA', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\xB4', '\n', '\x16', '\x3', '\x16', '\x2', '\x2', 
		'\x17', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', '\x2', '\x4', '\x3', '\x2', '\x3', '\x4', '\x3', '\x2', '\x5', '\x6', 
		'\x2', '\xAF', '\x2', '/', '\x3', '\x2', '\x2', '\x2', '\x4', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '@', '\x3', '\x2', '\x2', '\x2', '\b', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'K', '\x3', '\x2', '\x2', '\x2', '\f', 
		'P', '\x3', '\x2', '\x2', '\x2', '\xE', 'X', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '_', '\x3', '\x2', '\x2', '\x2', '\x12', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'r', '\x3', '\x2', '\x2', '\x2', '\x16', 'u', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x81', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x88', '\x3', '\x2', '\x2', '\x2', ' ', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x92', '\x3', '\x2', '\x2', '\x2', '$', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x9B', '\x3', '\x2', '\x2', '\x2', '(', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xB3', '\x3', '\x2', '\x2', '\x2', ',', 
		'.', '\x5', '\b', '\x5', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x36', '\x5', '\x4', '\x3', '\x2', '\x33', '\x35', '\x5', '\b', '\x5', 
		'\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\b', 
		'\x2', '\x1', '\x2', ':', '\x3', '\x3', '\x2', '\x2', '\x2', ';', '<', 
		'\x5', '\x6', '\x4', '\x2', '<', '=', '\a', '\r', '\x2', '\x2', '=', '>', 
		'\x5', '\x14', '\v', '\x2', '>', '?', '\a', '\xE', '\x2', '\x2', '?', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\t', '\x2', '\x2', 
		'\x41', '\x42', '\a', '\v', '\x2', '\x2', '\x42', '\x43', '\a', '\b', 
		'\x2', '\x2', '\x43', '\x44', '\a', '\xF', '\x2', '\x2', '\x44', '\x45', 
		'\a', '\x10', '\x2', '\x2', '\x45', '\x46', '\b', '\x4', '\x1', '\x2', 
		'\x46', '\a', '\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x5', '\n', '\x6', 
		'\x2', 'H', 'J', '\x5', '\xE', '\b', '\x2', 'I', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 'J', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\x5', '\f', '\a', '\x2', 'L', 'M', '\a', '\r', 
		'\x2', '\x2', 'M', 'N', '\x5', '\x12', '\n', '\x2', 'N', 'O', '\a', '\xE', 
		'\x2', '\x2', 'O', '\v', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\t', 
		'\x2', '\x2', 'Q', 'R', '\a', '\v', '\x2', '\x2', 'R', 'S', '\a', '\x16', 
		'\x2', '\x2', 'S', 'T', '\a', '\xF', '\x2', '\x2', 'T', 'U', '\x5', '\x18', 
		'\r', '\x2', 'U', 'V', '\a', '\x10', '\x2', '\x2', 'V', 'W', '\b', '\a', 
		'\x1', '\x2', 'W', '\r', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x5', 
		'\x10', '\t', '\x2', 'Y', 'Z', '\a', '\r', '\x2', '\x2', 'Z', '[', '\x5', 
		'\x12', '\n', '\x2', '[', '\\', '\x5', '\x16', '\f', '\x2', '\\', ']', 
		'\a', '\xE', '\x2', '\x2', ']', '^', '\b', '\b', '\x1', '\x2', '^', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\t', '\x2', '\x2', '`', '\x61', 
		'\a', '\n', '\x2', '\x2', '\x61', '\x62', '\a', '\x16', '\x2', '\x2', 
		'\x62', '\x63', '\a', '\xF', '\x2', '\x2', '\x63', '\x64', '\x5', '\x18', 
		'\r', '\x2', '\x64', '\x65', '\a', '\x10', '\x2', '\x2', '\x65', '\x66', 
		'\b', '\t', '\x1', '\x2', '\x66', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'g', 'j', '\x5', ' ', '\x11', '\x2', 'h', 'j', '\x5', '&', '\x14', '\x2', 
		'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'm', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x5', ' ', '\x11', 
		'\x2', 'o', 'q', '\x5', '&', '\x14', '\x2', 'p', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', 
		'\x2', 's', '\x15', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\a', '\a', '\x2', '\x2', 'v', 'w', '\x5', '*', 
		'\x16', '\x2', 'w', 'x', '\b', '\f', '\x1', '\x2', 'x', '\x17', '\x3', 
		'\x2', '\x2', '\x2', 'y', '~', '\x5', '\x1A', '\xE', '\x2', 'z', '{', 
		'\a', '\f', '\x2', '\x2', '{', '}', '\x5', '\x1A', '\xE', '\x2', '|', 
		'z', '\x3', '\x2', '\x2', '\x2', '}', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x82', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x81', 'y', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\a', '\n', '\x2', '\x2', '\x84', '\x85', '\a', 
		'\x16', '\x2', '\x2', '\x85', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x87', '\t', '\x2', '\x2', '\x2', '\x87', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x89', '\t', '\x3', '\x2', '\x2', '\x89', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\"', '\x12', '\x2', '\x8B', 
		'\x8C', '\b', '\x11', '\x1', '\x2', '\x8C', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\x5', '$', '\x13', '\x2', '\x8E', '\x8F', '\b', 
		'\x11', '\x1', '\x2', '\x8F', '\x91', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '!', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x5', 
		'\x1C', '\xF', '\x2', '\x93', '\x94', '\a', '\xF', '\x2', '\x2', '\x94', 
		'\x95', '\a', '\x14', '\x2', '\x2', '\x95', '\x96', '\a', '\x10', '\x2', 
		'\x2', '\x96', '#', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x5', 
		'\x1E', '\x10', '\x2', '\x98', '\x99', '\a', '\xF', '\x2', '\x2', '\x99', 
		'\x9A', '\a', '\x10', '\x2', '\x2', '\x9A', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\a', '\x16', '\x2', '\x2', '\x9C', '\x9D', '\a', 
		'\xF', '\x2', '\x2', '\x9D', '\x9E', '\x5', '(', '\x15', '\x2', '\x9E', 
		'\x9F', '\a', '\x10', '\x2', '\x2', '\x9F', '\xA0', '\b', '\x14', '\x1', 
		'\x2', '\xA0', '\'', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA6', '\x5', 
		'*', '\x16', '\x2', '\xA2', '\xA3', '\a', '\f', '\x2', '\x2', '\xA3', 
		'\xA5', '\x5', '*', '\x16', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', ')', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\a', '\x15', '\x2', '\x2', '\xAC', '\xB4', '\b', '\x16', '\x1', 
		'\x2', '\xAD', '\xAE', '\a', '\x14', '\x2', '\x2', '\xAE', '\xB4', '\b', 
		'\x16', '\x1', '\x2', '\xAF', '\xB0', '\a', '\x13', '\x2', '\x2', '\xB0', 
		'\xB4', '\b', '\x16', '\x1', '\x2', '\xB1', '\xB2', '\a', '\x16', '\x2', 
		'\x2', '\xB2', '\xB4', '\b', '\x16', '\x1', '\x2', '\xB3', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '+', '\x3', '\x2', '\x2', '\x2', '\xF', '/', '\x36', 'I', 
		'i', 'k', 'p', 'r', '~', '\x81', '\x90', '\xA6', '\xA9', '\xB3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
